<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orchidany&#39;w blog</title>
  
  <subtitle>Love is a touch but yet not a touch</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.orchidany.cf/"/>
  <updated>2019-02-14T14:50:41.575Z</updated>
  <id>http://www.orchidany.cf/</id>
  
  <author>
    <name>Orchidany</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随想·目次表</title>
    <link href="http://www.orchidany.cf/2050/12/31/%E9%9A%8F%E6%83%B3%C2%B7%E7%9B%AE%E6%AC%A1%E8%A1%A8/"/>
    <id>http://www.orchidany.cf/2050/12/31/随想·目次表/</id>
    <published>2050-12-31T14:24:26.000Z</published>
    <updated>2019-02-14T14:50:41.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>终于又开始了。</p><p>换了新的博客，把之前博客园里的三篇搬了下来。</p><p>每次只要我写，一定是有什么奇妙/特殊/悲伤的事情发生，或者是我内心颇不宁静。当然，往往是后者起决定性因素。</p><p>时隔几个月，我读到第一篇随想时，虽然能感受出暮夏时的无奈与懵懂，但是还是十分幸福的。</p><p>读第二篇丘吉尔时，我内心在撕裂、在纠结，昔日困顿麻木却又敏感的我，再一次呈现在自己眼前，仿佛自己经历了这么多，还是原来那个不变的少年。</p><p>读我$NOIP$的启示录的时候，我能感受到我是多么绝望——我不愿意提及这件事。但无论如何，我从那里面读出了最让人动容的东西——绝处逢生的微芒希望与铺天盖地的绝望，懵懂的爱与切骨的恨，缠绵悠长，时至今日仍然震扣我的灵魂。</p><p>是的，我是花，一个不理智的$Oier$。我也想每天24小时拼出48小时的效率一心做题，但是我做不到，我血液中凝结着的，在催促我写下来，必须要写下来。</p><p>在这些文章里，你会看到一个迷茫的青年如何满怀热血与绝望，眼里闪烁着沧桑与希望，怀里揣着坏掉的粮食和崭新的论文，脚下踏着崎岖不平的路，向明天走去。</p><p>是的，我是花，来自山东，你直接叫我花这个ID或许我会很高兴，但是如果你认识我也可以不这么拘束。</p>        <div id="aplayer-FwxtLPQI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-FwxtLPQI"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "花",              author: "Hello Nico",              url: "Hello Nico-花.flac",              pic: "/2050/12/31/随想·目次表/qwq.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>以下是目录：</p><table><thead><tr><th style="text-align:center">题目</th><th style="text-align:center">链接（点击即可）</th></tr></thead><tbody><tr><td style="text-align:center">随想一 · 杨柳岸晓风残月</td><td style="text-align:center"><a href="http://www.orchidany.cf/2018/08/02/%E9%9A%8F%E6%83%B3%E4%B8%80/">$Link$</a></td></tr><tr><td style="text-align:center">随想二 · 丘吉尔</td><td style="text-align:center"><a href="http://www.orchidany.cf/2018/08/08/%E9%9A%8F%E6%83%B3%E4%BA%8C/">$Link$</a></td></tr><tr><td style="text-align:center">随想三 · 本赛季最后的随想/启示录</td><td style="text-align:center"><a href="http://www.orchidany.cf/2019/02/14/%E9%9A%8F%E6%83%B3%E4%B8%89%C2%B7NOIP/">$Link$</a></td></tr><tr><td style="text-align:center">随想四 · 故人今安否？</td><td style="text-align:center"><a href="http://www.orchidany.cf/2019/02/14/%E9%9A%8F%E6%83%B3%E5%9B%9B%C2%B7%E6%95%85%E4%BA%BA/">$Link$</a></td></tr><tr><td style="text-align:center">随想五 · 手中没有红玫瑰</td><td style="text-align:center"><a href="http://www.orchidany.cf/2019/02/14/%E9%9A%8F%E6%83%B3%E4%BA%94%C2%B7%E6%83%85%E4%BA%BA%E8%8A%82/">$Link$</a></td></tr><tr><td style="text-align:center">$\rm{empty}$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\rm{empty}$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\rm{empty}$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\rm{empty}$</td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="随想/下下笔" scheme="http://www.orchidany.cf/tags/%E9%9A%8F%E6%83%B3-%E4%B8%8B%E4%B8%8B%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随想五·手中没有红玫瑰</title>
    <link href="http://www.orchidany.cf/2019/02/14/%E9%9A%8F%E6%83%B3%E4%BA%94%C2%B7%E6%83%85%E4%BA%BA%E8%8A%82/"/>
    <id>http://www.orchidany.cf/2019/02/14/随想五·情人节/</id>
    <published>2019-02-14T14:14:41.000Z</published>
    <updated>2019-02-14T16:13:29.095Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“随想”系列索引：<a href="http://www.orchidany.cf/2050/12/31/%E9%9A%8F%E6%83%B3%C2%B7%E7%9B%AE%E6%AC%A1%E8%A1%A8/">戳我</a></p><hr><p>今天下了一天的雪。</p><p>我是隔着窗户望的，直到现在我还没有真正触摸到久违的雪花。一年多了？或许吧。我轻度近视，但是白天在窗边的书桌旁习作时，不戴眼镜的，还是能看到纷飞的白絮——虽然有些模糊。它们经常想我挥手致意，我也满足了。</p><p>“情人节呢…”我想着。当然，人类在思考一件事的时候不可避免的要联想，我联想到的是什么呢？是我没写完也压根不想写的作业，是如果有了恋人之后老师们的竭力反对、在同学中显得鹤立鸡群以及在学业与处理恋爱关系的漩涡交叉中抽不开身——大抵就是这些吧。我不敢想了，因为我想到一桩美好的事情，仿佛就会联想到十件、上百件令人不寒而栗的事情——这让我感到恐惧。</p><p>雪真美啊。</p><hr>        <div id="aplayer-WQZstToX" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-WQZstToX"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "空も飞べるはず",              author: "定能飞向天空",              url: "古谷拳-空も飛べるはず (定能飞向天空).mp3",              pic: "/2019/02/14/随想五·情人节/ggq.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>早恋？</p><p>“严打！”， “好孩子不早恋！”， “早恋肯定没戏，好好学习吧”，“什么年龄就该干什么年龄该干的事儿”……</p><p>说真的，我很难启齿，哪怕是在要好的朋友面前——当我说出我对哪个女孩子有好感的时候，我都是怯怯的。</p><p>直到刚刚看到了这样一篇文章，是一个网络作家苏见祈写的，挺早的一篇文章了：</p><blockquote><p>小学五年级的时候，我喜欢班上的一个女孩子。<br>那时候想的很多。<br>比如有一天看电视剧，男主扑过来替女主挡了一枪，挂了。<br>那天我辗转反侧了一夜，质问自己如果有人用枪指着我喜欢的小女孩，我敢不敢扑过去赴死。<br>这犹豫让12岁的我非常羞愧。我觉得这样自私的我，不配喜欢她。<br>我开始质疑自己，我自以为的喜欢是不是真的像大人说的那样，只是不懂事的小孩闹着玩。</p></blockquote><blockquote><p>如今我知道这自责毫无必要。在感情里闹着玩，这事儿在大人的世界里要流行的多。</p></blockquote><blockquote><p>我想得多还体现在了别的方面。比如老师说好好学习，可我一直不明白为什么。<br>他们的那些理由，比如找个好工作啊，出人头地啊，听起来就很无聊，何必呢。</p></blockquote><blockquote><p>于是从初一开始，原本三好学生的我成绩一落千丈，勉强只能上个末流高中。<br>家长老师全都急死了，或威逼利诱，或苦口婆心，我一概油盐不进。当然现在的我知道了读书的理由，可是叛逆期的少年什么也不想听。</p></blockquote><blockquote><p>后来初三开学，我收到了一封信。<br>来自那个小学时候喜欢的女孩子。<br>信的末尾有一句话：我准备报考X中，你要不要一起？</p></blockquote><blockquote><p>我的手不受控制地颤抖。<br>烈焰在灵魂的深处燃起，灼人的热浪席卷了全身每一个细胞。</p></blockquote><blockquote><p>为什么要读书呢？<br>16岁的我获得了唯一的答案——为了和喜欢的人在一起。<br>我开始疯了一样地复习，恶补这两年落下的知识点。书桌边上放了一盆水，困了就用水泼自己的脸。<br>对于我一夜之间的剧变，大人们一个个喜笑颜开，说孩子终于懂事了。<br>是啦，他们总以为自己很懂。</p></blockquote><blockquote><p>很多人说，小孩子不要谈感情，因为反正不会有结果。<br>是，的确不会有结果。<br>就像哪怕后来我如愿考上了X中，这依然不是柯景腾沈佳宜那样的故事。从始至终，我都没能在女孩的人生里扮演过哪怕一个配角。</p></blockquote><blockquote><p>可是如今我站在时间的彼端回望，如果那个十几岁的孩子没有爱上过什么人，那么他之后的人生，将无法挽回地滑入深渊。<br>爱过一个人，是我少年时最大的幸运。</p></blockquote><blockquote><p>所以，当所有大人视早恋为洪水猛兽的时候，我完全不敢苟同。而当他们言之凿凿地说“谈恋爱影响学习”的时候，我更只能报以白眼。<br>是，谈恋爱影响学习。只是很多时候，这“影响”可以被称为“激励”。</p></blockquote><blockquote><p>有可能影响学习的东西很多，电视剧可以，小说可以，糟糕的老师和不合格的父母更加可以。而在所有的因子里，恋爱最有可能把叛逆的少年变成更好的人。<br>结果所有的大人，偏偏用尽所有力气，揪着这柄双刃剑纠缠不清。</p></blockquote><blockquote><p>我甚至怀疑，比起那些高大上的“为你好”，他们只是恐惧另一个人成为自己孩子的精神寄托，恐惧孩子脱离自己的掌控——和婆婆刁难媳妇的心理相同。</p></blockquote><blockquote><p>他们轻蔑地说，小孩子懂什么恋爱。<br>好，那我们来看看大人们有多么懂爱情。<br>相亲的男女将各自的筹码摆上天平，房，车，行业，家庭，收入，像一场等价交换的生意。<br>夜场里乐声震耳欲聋，男人在刚认识半小时的女人耳边大喊，明天上午我送你回学校好吗。<br>夫妻二人坐在沙发的两端玩着各自的手机，一晚上都懒得抬头看对方一眼。</p></blockquote><blockquote><p>所以我一直无法理解，成年人在孩子的爱情面前，那份优越感到底从何而来。他们趾高气扬地说着“小孩懂什么恋爱”，却不拿镜子照照自己的一地鸡毛。<br>难道以上这些画面，比穿着校服的女孩假装路过球场，只为偷看一眼喜欢的男生打球，更能称为爱情？</p></blockquote><blockquote><p>还有一种比较温和的反对，说起来语重心长：“你们还年轻，别着急，谈恋爱以后有的是机会。”<br>仔细回想，这种过来人现身说法的方式，对孩子的确很有说服力。孩子总是相信美好的，相信久别重逢，相信姻缘一线，相信十年之后我们至少还是朋友。</p></blockquote><blockquote><p>可是，请如今已经长大的大家问问自己，当年魂牵梦萦的那个人，如今还在吗？<br>你们是真的有的是以后，还是早已离散在人海？<br>而后来遇到的那些人，真能模糊了十六岁留在心里的眉眼吗？</p></blockquote><blockquote><p>很久以后我们终于知道，大人都在说谎。<br>少年的错过是一生的求不得，是哪怕功成名就和富可敌国都无法挽回的遗憾。或许未来的你风光无限，可你永远无法逆转时间。没有什么“有的是机会”，错过此刻，就是错过一生。</p></blockquote><blockquote><p>如果有还在上学的读者看到这里，请记住，人生没有那么多以后。<br>有喜欢的人就去追，你不追上ta，分离就会追上你，没有例外。当然啦，为了你们的手能牵得久一些，成绩一定不能落下。</p></blockquote><blockquote><p>至于那些义正辞严棒打鸳鸯的长辈……相信我，十年后他们不会理会你的遗憾和怅惘，他们会催你随便找个人结婚，并且丝毫不觉得在打自己的脸。</p></blockquote><blockquote><p>我有个有点儿丧的朋友，叫小怪。关于少年的爱恋他说过一段话，我觉得我不能说得更好了，借花献佛送给大家。</p></blockquote><blockquote><p>” 很多人即使只见过一面，已经算见过了最后一面。“</p></blockquote><blockquote><p>十八岁前不早恋，这辈子都来不及早恋。<br>你的人生看起来很长，每一秒都无法挽回。</p></blockquote><p>虽然不排除有“站着说话不腰疼”的嫌疑，但是我觉得这或许提醒了我什么。</p><p>我今天在这里可以开诚布公地跟各位讲我所谓的”感情经历“，”心路历程“。</p><p>当然，也是给我自己讲。</p><p>关于这件事，我一直纠结的很。因为身旁或许有了喜欢的女生，但是或因为她有男朋友了，或因为别的什么原因，我不能很顺利地实现。是坚持呢，还是不坚持呢？我不知道。以前在初中，遇到一个女孩就痴痴地觉得可以携手一生，但最后却是连牵手的机会都没有。</p><p>现在不一样了吧，一生，多长啊。</p><p>我是在担心这个吗？我也不知道。大概是从来没有什么人支持过我，包括我自己，也从来没有支持过我自己。</p><p>没提起这件事，遇见她，总会感觉内心无比纠结，会因为她一颦一簇心里翻腾好久，也会因为其他的原因感到略略压抑。好像我已经把她当成了什么洪水猛兽。因而我也常常纠结不已。</p><p>等会儿，难道每天纠结的要死就是我想要的吗？理性分析一下，我想要她成为我的恋人是我喜欢她的必然结果，但是这两种状态我真的可以权衡的很好吗？换句话说，我关于她的的喜怒哀乐还是因为我喜欢她吗？</p><p>不，我觉得不是。</p><p>我是在亵渎一种感情，是在侮辱一个人。</p><p>爱从来都是无私地付出，而不是拼命的占有啊。</p><p>我仿佛把她当做了一种商品，一种十分想得到手的商品。我现在会展现给自己、也展现给其他人一副十分渴求、十分真诚的面孔，或许也不过是希望得到她的一种手段。当我们真正属于彼此后，我不能保证在那层皮撕开之后，我还会一如既往地珍惜这份情愫，你也不能保证，同样，她也不能保证。</p><p>你看，就这么点儿事情我纠结了这么长的篇幅。什么纠结啊，占有啊，真爱啊，一生啊，</p><p>都不过是拼命地想被爱而已。</p>        <div id="aplayer-ChcCJklk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-ChcCJklk"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "clammbon-ソナタ",              author: "(奏鸣曲)",              url: "clammbon-ソナタ (奏鸣曲).mp3",              pic: "/2019/02/14/随想五·情人节/zmq.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><hr><p>不知道现在看到这儿的你是否和我一样孤独？孤独并不是每个人都有的情感，有些人，很多人从来都不会感到孤独——我多羡慕他们啊……</p><p>孤独，或许也是另一种程度上的纯粹。我至今仍觉得我有着最纯粹的感情，是少年一样的感情，不是想垂暮老人一样的、只可独自怀念的情感。这种感情是热切的、生动的。</p><p>我很喜欢一首合唱曲目，叫做”我喜欢“。歌词十分动人，旋律优美动听，松弛恰到好处。</p><p>下面是歌词：</p><blockquote><p>我喜欢暖冬的太阳<br>我喜欢初春的青草<br>我喜欢午后的庭院和一旁发呆的秋千<br>我喜欢仲夏的冰沙<br>我喜欢清秋的明月<br>良宵的夜空 漫天星辰<br>我喜欢雨后的青蛙<br>我喜欢山前的杏<br>我喜欢周三的傍晚被霞光亲吻的水族馆<br>我喜欢成群的野<br>我喜欢凌乱的书架<br>清风的露台远处的灯海<br>我喜欢 走在无人的九十六号公路<br>我喜欢 木村拓哉长长的头发<br>我喜欢 无尽田野上奔跑的麋鹿<br>我喜欢 外婆门前的榕树<br>我喜欢母亲的便当<br>喜欢父亲的胡渣<br>我喜欢八月的夜晚还在营业的游乐场<br>我喜欢放学的铃铛<br>我喜欢停电的夜晚<br>点一对蜡烛 在幽静的玄关<br>我喜欢 城市尽头那远远的青山<br>我喜欢 热气球飞上西边的天空<br>我喜欢 清晨的石板路<br>雾腾腾的早餐店 阿公的桂花糕<br>我喜欢 每一朵暮云 每一株绿树<br>我喜欢你，你应该，也知道<br>我喜欢你，你应该，也知道</p></blockquote><p>优美的旋律，配上最后两句甜甜的告白。或许我们开来，似乎有点扭捏——扯这么多只为了表达最后两句——、</p><blockquote><p>我喜欢你，你应该，也知道.</p><p>我喜欢你，你应该，也知道。</p></blockquote><p>很平常？确实很平常。但是我认为这两句恰到好处。前面大段大段的铺垫，叙述了许许多多美好、恬静的事物，但是这一切或许都比不过你。</p><p>你可以想象，在一片动人的夕阳下，天空中是大片大片的奶茶红，一个憨憨的大男孩，突然叫住你，红着脸跑到你面前，拿着皱皱巴巴的稿子，颤颤地朗诵着这些——他实在太动情了，念着念着突然声调放高，声音变大——他是打心眼里喜欢你，越读越有感情，越读他越自信——但是突然他又畏缩起来，声音低低地向你说出了最后一句最动人的话：”我喜欢你，你应该，也知道“。</p><p>有可能你没有什么特殊的感觉，但在我心里，这就是最纯粹的东西——是不奢求的朴实的爱，是不考虑物质只拿捏感情的爱，是无语凝噎但心中重复千千万万次的爱，是真挚的爱。这是属于我们这个年纪最美好的东西，虽然有学业繁忙等诸多因素阻挠，无法完整地得到——但或许只是一片、两片这样的有着亮暖色调的枫叶，就可以点亮一整片枯败的枫林。</p><p>我大概在听这首歌之前，从来没有真正知道原来”喜欢“这个已经烂大街的词、这个现如今可以随便说出口又可以随便忘记的词、这个在我上过的所有学校里从来没有人敢光明正大说出来的词、这个现在在芸芸众生中已经被玷污的、被人们还没有一块钱来的实在的词，竟然如此的可爱，竟然如此的值得人们尊敬，竟然可以在冰冷的寒夜散发出如此耀眼的光芒。</p><p>我喜欢你，你应该，也知道。</p>        <div id="aplayer-apSzOqST" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-apSzOqST"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "我喜欢",              author: "彩虹合唱团",              url: "上海彩虹室内合唱团-我喜欢 (合唱版).flac",              pic: "/2019/02/14/随想五·情人节/wxh.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><hr><p>心在流浪的人啊，在这华灯遍街的情人节，你是否也跟我一样，跟自己的灵魂形影相吊呢？</p><p>如果你已经有了心上人，我祝福你；如果你已经有了打算携手一生的人，我也祝福你。唯有那些都市里最角落的孤独者，我们的邂逅或许是一种缘分吧，或许我们素未谋面，或许我们并不熟识，但在这流光掠影的漆黑夜空下，我希望你能跨过一切，跨过时间——看这篇文章时的你，伸出你的右手，或许就可以跟在这一晚伏案沉思写下这篇文章的我，轻轻击掌，感受对方的体温与灵魂。</p><p>我伸出手了啊，你呢？嗯…抱歉啦，我手中今天没有红玫瑰可以送你。这翩飞的雪花，就当做是我送你最好的礼物吧。</p><p>相信我，这个世界上绝对有人偷偷地爱着你，即使你觉得自己很不堪。比如你班里的某个人，比如你对门，比如你的后桌，比如，我。</p><p>$19/2/14$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="随想/下下笔" scheme="http://www.orchidany.cf/tags/%E9%9A%8F%E6%83%B3-%E4%B8%8B%E4%B8%8B%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019赛季最后的随想/ $\rm{NOIP2018}$游记·启示录</title>
    <link href="http://www.orchidany.cf/2019/02/14/%E9%9A%8F%E6%83%B3%E4%B8%89%C2%B7NOIP/"/>
    <id>http://www.orchidany.cf/2019/02/14/随想三·NOIP/</id>
    <published>2019-02-14T14:11:50.000Z</published>
    <updated>2019-02-14T14:53:22.280Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“随想”系列索引：<a href="http://www.orchidany.cf/2050/12/31/%E9%9A%8F%E6%83%B3%C2%B7%E7%9B%AE%E6%AC%A1%E8%A1%A8/">戳我</a></p><hr><p>他看着眼前的屏幕，静静地发呆。</p><p>他不知道迎接他的将会是什么，后天的$\rm{NOIp}$终究是个谜。</p><p>刚刚给机房里其他人讲完期望的他，打心底觉得自己没有讲好，但效果似乎还可以。</p><p>“希望别考期望吧，嘿嘿……”他心里这么想着。</p><p>晚上，他一直在补他出的题的锅。鸽了这么久，也该写一写题解了啊。</p><p>他不知道是否该向身旁的同僚们一样继续打板子——上午打的板子让他很满意，虽然都是很简单的东西，但是他却觉得自己写的很精彩，都是一遍$AC$。大概这样，他觉得似乎没什么问题。</p><p>从下午就开始有空调暖风了，这倒是让他十分欣喜。前几天，或者说昨天，在机房穿着厚厚的羽绒服，手颤抖着，脑袋十分昏沉地打代码，他不愿意再回想起这些。</p><hr><p>早上十分着急地买了早饭，之前吃学校里的羊汤都吃的是羊杂汤，今天决定尝试一下贵三块钱的羊肉汤的他感到很失望——羊肉又肥又腻又膻腥。他一点没吃，买了一块脆香米就走出了食堂。去奥赛室收拾了一下东西，本来还想离线下来几集最近在追的番剧，才发现原来$\rm{Bilibili}$没有$Mac$版，连硕鼠也不能用了，便只得作罢。</p><p>终于要走了。踏上去昌邑一中的车的前一刻，他回头看了一眼学校。他记得那个开朗的、但是实际上并不是很熟的女孩在听课之前为他助威的场景；他记得他自己计划的是，$NOIP$好好考，参加完冬令营，签一个清北约，带着还算不错的成绩迎接寒假，然后在寒假里去找他的女神——高中新认识的、一个爱笑的、努力的、可爱的女生，撩她出去玩儿，最好是能在一起吧——但是学校规则是不会允许的吧。不过他认为，只要彼此都在学校里数一数二，只要彼此都能比较轻松地上清北，学校或许会睁一只眼闭一只眼。他似乎对将来他们一起努力的场景充满了信心。</p><p>“大概只需要400分，或者以上？总之不是特别难吧。”他这么想着，眼里发出晶蓝色的光，或许是反射的太阳光吧。</p><p>看了看天空，他上了大巴车。</p><hr><p>”昌邑一中真大啊“这是他到这儿后的第一想法。</p><p>到达昌邑一中已经是中午。饭菜比较可口，在他心里大概比日照一中的饭菜$better$几倍。下午原本想出去找同僚们蹭一下网，把板子打完，但谁知道一睡就睡到了四点。匆匆忙忙地看完考场位置，在路上遇到了同僚和前同僚。瞎侃了几句之后发现到饭点儿了，于是就只能选择去吃晚饭了。晚饭给他的感觉似乎没有午饭那么惊艳，“或许是太累了吧”，他这么想。吃饭的时候和$rqy$瞎侃，感觉海星。</p><p>宿管说$6$点以后来电，结果咕咕咕。我们于是就用空调插头接上插排凑活了一晚上。</p><p>他十二点左右才睡下——虽然他知道这么晚睡不行，但是没有办法，板子没打完的话，心中像是有什么负担一样——当初他执着于补一晚上自己的锅而不是去打板子大概也是这个缘由。他想放心地进入考场，这是他考试的习惯。</p><hr><h2 id="rm-Day-1"><a href="#rm-Day-1" class="headerlink" title="$\rm{Day~1}$"></a>$\rm{Day~1}$</h2><p>突然不让坐电梯，六楼让他气喘吁吁。“该减肥了……不过现在或许不是想这个的时候”。</p><p>考场在六楼，昨晚试机的时候，他写了一个$dijkstra$，写了个$ST$表又写了个暴力$n^2 ~\rm{RMQ}$ ，并写了个对拍。都是一次成功。让他感觉很好。</p><p>入场了，他带了两块橡皮糖，两小块脆香米，都是早先从学校买好的。</p><p>$T1$他觉得似曾相识，大概是什么积木大赛还是积木大会啥的，他记不清了。考场的时候他一走神就会不自觉地去想最后一个字到底是什么，但就是想不起来。最后他写了一个复杂度$n\log^2n$的线段树和一个$n\log n$的$ST$表，又写了个对拍啥的让他俩拍，此时已经$9:15$了。</p><p>$T2$他从第一眼开始就已经输了。他觉得应该是什么数学题或者结论题，花了$10min$写了个暴力，过不了大样例的最后一个点，又想了$10min$他才发现原来不止可以由两个推出新的，可能是三个或者更多。$DP$这个想法在他脑子里一闪而过，他没有选择捕捉。最终他居然只写了一个暴力+骗分。</p><p>$T3$大概只会求直径——但是他只记得是什么两遍$dfs$或者$bfs$，因为他从没做过求直径的题。考试之前$qbxt$的时候，他甚至让别人给他推荐几道直径的题，但终究是没来得及做。他很后悔。最终写了一个暴力骗分。</p><p>期望得分$100pts + random(0,100)+random(10,20) $</p><p>$Luogu$数据$100pts + 65pts + 15pts = 180pts$</p><p>听说今天三道题都是原题，他很愤懑，希望没准可以让$CCF$重考一下之类的。但是这根本是无稽之谈。</p><p>下午他和同僚去逛了逛昌邑一中，并且买了三本东野圭吾的书，店主对他不错，给他打了七折。</p><p>考挂了，他想到。</p><p>这世界上似乎就他一个不会$T2$的人。</p><p>他对好多人的言行感到厌烦：有人说“完了，大众分160”，接着便有人回驳他“明明大众分220”，但接着又有人大声地说“大众分明明255好吧”。</p><p>虽然大家平常都互%，但是总感觉那些弱小的人是多么的无助啊——他们只会感到虚伪、无助、绝望。像我一样。</p><p>或许他期望着明天能翻盘？</p><p>晚上他彻底颓废了，要求熄灯后，他用同学的热点看了《青春期猪头少年XXXX》的最新三集，感到海星。依旧睡得不早。$11：30$左右吧。</p><hr><h2 id="rm-Day-2"><a href="#rm-Day-2" class="headerlink" title="$\rm{Day~2}$"></a>$\rm{Day~2}$</h2><p>今天他没有带什么吃的。</p><p>$T1$只会$60$分，转眼去看$T2$</p><p>写了好长时间的暴力并且调了好久，在考试结束前$30min$他写好了爆搜，找出了规律，$65pts$左右。</p><p>$T3$连想的时间都没有。</p><p>退役了。</p><hr><p>他很伤心。</p><p>回家之后他和其他省市的$Oier$交流之后发现大概都挂了。无奈的世界。</p><p>他本来不想期中考试，但是却又想不出什么理由来不去考试。毕竟刚考完$NOIp$的其他人都照常期中考试。</p><p>他觉得自己语文发挥的一般，物理发挥的正常，除了物理的某个傻狗填空题让保留一位小数自己眼瞎了而已。</p><p>其余的都考炸了。</p><p>初回文化课，班里的人并不陌生。语文老师似乎对他的这个语文课代表的回归感到很高兴。</p><p>他一开始也并不怎样，没啥感觉。</p><p>直到那天下午。</p><hr><p>他兴高采烈地去奥赛室看民间测试数据的成绩。中午高二的某个学长告诉他的，他考了全校第四，接近$400$分。虽然可信度不高，毕竟自己什么逼数他自己心里清楚。不过还是期待了一下午。</p><p>兴奋的他去奥赛室看成绩。</p><p>学长看错了。</p><p>他的两个同僚都是$370/380+$的样子。</p><p>只有他不到.</p><p>其他人的分数也比他高。</p><p>他大概全校第十几吧。</p><p>他感到了绝望。</p><p>本来以为的三人行（三个人一起参加过两届省队集训），其实是不包括他的两人行。</p><p>他注定是失败者。</p><p>他伤心极了。</p><hr><p>他开始愈发消沉，晚自习看了一晚上的文学素材荟萃那种东西，都是些鸡汤之类的蠢文章。但他什么都不想干。他想在学校读那几本从昌邑买回来的书，但是怕被抓只好作罢。</p><p>他觉得一年来，他一事无成。</p><p>或许进实验部只是个错误。但他是不会退出的。即使是为了面子也不会。</p><p>他原本计划好的一切都没有成功。现在最后一次机会，他依旧失败了。人生输家，大抵就是这样。他不愿意去面对他的奥赛同僚们。他大概就像是$EDG$——国内赛如同战神一般，一到国际比赛就死。</p><p>他的女神越开心，他越寒心。倒不是因为别的，只是他的女神越可爱，他越觉得曾经做白日梦的自己是个不曾认清现实的傻$B$，他越发感到落差的不可逾越。他绝望了。</p><p>期中考试成绩发下来了，他从停课之前的班里第五，年级第二十滑到了班里第四十，年级第$289$。这次他们班考得很好。年级前四，他的班里有三个；年级前20有10个，年级前400有46个。年级共有1640左右的人。</p><p>这似乎是实验部该有的成绩。可是跟他没有关系。</p><p>特别的，他的女神考了年级28，班里第13。他比她差十倍。虽然停课了一段时间没上好像是个不错的理由，但他依旧觉得，自己太失败了。</p><p>太失败了。</p><p>太失败了。</p><hr><p>大休回家，现在是$11.17$晚，我用第三人称说完了这个故事，感觉……并没有什么感觉。</p><p>我发现我现在心情虽然很沉重，但是同样很放松。我大概不会再参加什么$OI$了吧——这让我感到轻松无比。不需要面对其他很强的人而有心理负担，不必面对教练主任去承受他们的“高目标”，不必每次fake时还会纠结我自己到底强不强，不必再去争强好胜。虽然最终免不了被当做反面教材说个$OI$的学弟们，虽然免不了是要主任被批一顿并且让你总结个什么傻逼错因或者感悟并让你声泪俱下地去反省并且保证以后好好学$OI$，但，我轻松的很。</p><p>这真是从未有过的轻松的感觉。</p><p>或许我本来没有什么天赋，只是在靠个人素质硬刚而已。也许信竞给我的终究是除了成功之外的一切，比如毅力，比如做人。</p><p>我感到无比的轻松。</p><p>以后大概不会学信竞了吧。毕竟压根没有什么转机。路的话，边走边想吧。</p><p>我现在十分地想学$CNAO$，之前由于要准备$NOIp$，从图书馆借来的书没来得及看。现在终于有时间了。</p><p>嗯，大概天文才是我真正喜欢的吧。以前每次为了$OI$奋斗的时候总要想想自己到底是不是真正喜欢$OI$，其实说不上喜欢吧，毕竟没有真的从骨子里喜欢这东西。</p><p>但是其实山东没有开展$AO$的，不过我想当这个第一人。</p><p>我突然很感激这一切，感激曾经的失败与成功、收获与感动。君与我之恩，毕生难忘。</p><p>到了说再见的时候了，哈，我的作业还没写呢。我可要学好文化课，做的滴水不漏才能去学$AO$啊，虽然这是一段未知的旅程，但是我乐意去闯。</p><hr><p>在成绩单上看到了好多山东的巨佬……曾经在我看来与我水平差不多的人，大概都以压倒性的优势击败了我吧。</p><p>没准学$OI$的时候，如果我一直是为了功名利禄而学，为了获得进入某两所大学的机会而学，终究是肯定不会成功的吧——到不是说一定要去喜欢这门奥赛，只是在奋斗的时候，还是只为了奋斗而奋斗比较好吧。</p><p>我该说什么？强大的理解能力或者推理能力，终是不是OI的核心素养——创造力才是。当然啦，数学有够好的话+强大的理解能力=rqy这个等式也是成立的。</p><p>当然，不属于我啦。</p><p>虽然现在很不甘……但是没有办法，大概这就是人生吧。</p><p>如果说……退役后的几天感觉怎么样……还好吧，没我想象的痛苦。只不过之前一直憧憬的所谓“妹子”也好，“女神”也好，原来一直有男朋友只不过我不知道；只不过干起什么事情来都力不从心而已；只不过重新燃起的希望之火又被浇灭了而已吧，也没有什么必要去为之伤心——这才是人生吧。</p><p>听说你谷有个OIer自杀了……不知道这个传闻是真是假，毕竟也没法去确认。我只是为此感到伤心而已——无论到底有没有自杀，我只想用那句话来评论“实力如果强到独步天下，想怎么学就怎么学；否则只能毫无保留地、纯粹地去努力，而不是为了去获得功名、封佛封神 —— 不忘初心在什么时候都是最重要的。”所以，心无旁骛，什么时候都是最重要的。</p><p>总之呢，我把这篇文章称之为“启示录”，只是希望后来的Oier或可以从我的这一些杂悟里获得些什么：</p><h2 id="做什么事情，都要先从自己的灵魂出发，而不是从利益出发。"><a href="#做什么事情，都要先从自己的灵魂出发，而不是从利益出发。" class="headerlink" title="做什么事情，都要先从自己的灵魂出发，而不是从利益出发。"></a>做什么事情，都要先从自己的灵魂出发，而不是从利益出发。</h2><p>之类的吧。</p><p>我想引用一句（段）话，来自《本杰明巴顿奇事》：</p><blockquote><p>有些人，注定可以于河边闲坐。<br>有些人被闪电击中过七次。<br>有些人对音乐有着非凡的天赋。<br>有些人是艺术家。<br>有些人是游泳健将。<br>有些人懂得制作纽扣。<br>有些人懂莎士比亚。<br>有些人是妈妈。<br>还有些人，是舞者。<br>我们注定要失去我们所爱的人，<br>要不然我们怎么知道他们对我们有多么的重要。</p></blockquote><p>后会有期。</p><h1 id="mathscr-THE-END"><a href="#mathscr-THE-END" class="headerlink" title="$\mathscr{THE~~~END}$"></a>$\mathscr{THE~~~END}$</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="随想/下下笔" scheme="http://www.orchidany.cf/tags/%E9%9A%8F%E6%83%B3-%E4%B8%8B%E4%B8%8B%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>笙上月$Project$</title>
    <link href="http://www.orchidany.cf/2019/02/14/%E7%AC%99%E4%B8%8A%E6%9C%88/"/>
    <id>http://www.orchidany.cf/2019/02/14/笙上月/</id>
    <published>2019-02-14T07:48:12.000Z</published>
    <updated>2019-02-14T08:14:25.180Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>准确来说这是一个$project$，专门以$art/painting$、$music$为主。</p><p>现在已经在原博客上更了两期了，因为实在懒得再去捯饬图片的事儿，于是就直接链过来好了：</p><p><a href="https://www.cnblogs.com/pks-t/p/9349900.html" target="_blank" rel="noopener">ArseniXC &amp; 莫奈</a></p>        <div id="aplayer-eEMnbJNP" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-eEMnbJNP"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "人啊",              author: "徐佳莹",              url: "徐佳莹-人啊.mp3",              pic: "/2019/02/14/笙上月/rena.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="笙上月" scheme="http://www.orchidany.cf/tags/%E7%AC%99%E4%B8%8A%E6%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>霉霉专辑$1989$&amp;$red$歌曲推荐$qwq$</title>
    <link href="http://www.orchidany.cf/2019/02/14/Taylor-Swift/"/>
    <id>http://www.orchidany.cf/2019/02/14/Taylor-Swift/</id>
    <published>2019-02-14T04:01:53.000Z</published>
    <updated>2019-02-14T05:31:33.172Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好像因为我上传的都是超高音质的，所以加载慢的很…</p><p><del>说是推荐其实就是想颓</del></p><p>好吧，原因是我发现原来$aplayer$他居然可以支持不同种类的音乐源文件，于是……于是$QQ$音乐给的毒瘤$.flac$文件就可以在线播放了！毕竟我的绿钻还有一年……于是就拿出来造福大家了（</p><p>但是推荐还是要正经推荐的！</p><h2 id="boldsymbol-1989"><a href="#boldsymbol-1989" class="headerlink" title="$\boldsymbol{1989}$"></a>$\boldsymbol{1989}$</h2><p>说实话这是我非常非常喜欢的一张专辑，每一首歌都可以打85的高分。但同时这也限制住了这种专辑向更高层次发展（我认为），因为……怎么说……感觉没有深度233</p><p><del>但这并不能阻挡它横扫格莱美(</del></p><p>首先当然主打$\rm{Style}$和$\rm{Blank~Space}$这两首：</p><h3 id="color-pink-boldsymbol-Blank-Space"><a href="#color-pink-boldsymbol-Blank-Space" class="headerlink" title="$\color{pink}{\boldsymbol{Blank ~Space}}$"></a>$\color{pink}{\boldsymbol{Blank ~Space}}$</h3><p>霸榜无数就不说了…入坑曲$qwq$</p>        <div id="aplayer-CvMRHnpH" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-CvMRHnpH"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Blank Space",              author: "Taylor",              url: "Taylor Swift-Blank Space.flac",              pic: "/2019/02/14/Taylor-Swift/1989.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>附赠霉霉创作这首歌时的花絮~</p>        <div id="aplayer-QbXcEIwH" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-QbXcEIwH"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Blank Space(demo)",              author: "Taylor",              url: "Taylor Swift-Blank Space(demo).flac",              pic: "/2019/02/14/Taylor-Swift/1989.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>真是才女啊(眼里透出了慈母一样的目光)</p><h3 id="color-pink-boldsymbol-Style"><a href="#color-pink-boldsymbol-Style" class="headerlink" title="$\color{pink}{\boldsymbol{Style}}$"></a>$\color{pink}{\boldsymbol{Style}}$</h3>        <div id="aplayer-GxwMniFN" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GxwMniFN"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Style",              author: "Taylor",              url: "Taylor Swift-Style.flac",              pic: "/2019/02/14/Taylor-Swift/1989.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>从这首单曲也可以看出，整体上来说$1989$的风格是明快鲜艳的，给人传递一种鲜活的生命力。这一感情基调同$red$或者$reputation$是不同的。</p><p>下面这首是这张专辑里我的最爱~</p><h3 id="color-pink-boldsymbol-Out-of-the-Woods"><a href="#color-pink-boldsymbol-Out-of-the-Woods" class="headerlink" title="$\color{pink}{\boldsymbol{Out ~of ~the~ Woods}}$"></a>$\color{pink}{\boldsymbol{Out ~of ~the~ Woods}}$</h3>        <div id="aplayer-MoaNtUMI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-MoaNtUMI"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Out of the woods",              author: "Taylor",              url: "Taylor Swift-Out Of The Woods.flac",              pic: "/2019/02/14/Taylor-Swift/1989.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>尤其是副歌部分的和声…妈妈我要娶这个有才的女人(</p><p>剩下的虽然也广受赞誉，我也很喜欢但是远不及上面三首qwq</p><h3 id="color-pink-boldsymbol-Shake-it-off"><a href="#color-pink-boldsymbol-Shake-it-off" class="headerlink" title="$\color{pink}{\boldsymbol{Shake~it~off}}$"></a>$\color{pink}{\boldsymbol{Shake~it~off}}$</h3>        <div id="aplayer-FWOoNpoF" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-FWOoNpoF"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Shake It Off",              author: "Taylor",              url: "taylor swift - shake it off(1) (320CBR).mp3",              pic: "/2019/02/14/Taylor-Swift/1989.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>绝对是一大亮点……$MV$也很帅啊哈哈哈哈</p><h3 id="color-pink-boldsymbol-I-Know-Places"><a href="#color-pink-boldsymbol-I-Know-Places" class="headerlink" title="$\color{pink}{\boldsymbol{I ~ Know ~Places}}$"></a>$\color{pink}{\boldsymbol{I ~ Know ~Places}}$</h3>        <div id="aplayer-zaIUJKRQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-zaIUJKRQ"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "I Know Places",              author: "Taylor",              url: "taylor swift - i know places (piano_vocal_voice memo) (320CBR).mp3",              pic: "/2019/02/14/Taylor-Swift/1989.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>开口跪qaq</p><h3 id="color-pink-boldsymbol-Clean"><a href="#color-pink-boldsymbol-Clean" class="headerlink" title="$\color{pink}{\boldsymbol{Clean}}$"></a>$\color{pink}{\boldsymbol{Clean}}$</h3>        <div id="aplayer-SsRPmomk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-SsRPmomk"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Clean",              author: "Taylor",              url: "taylor swift - clean (320CBR).mp3",              pic: "/2019/02/14/Taylor-Swift/1989.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>比较小清新，天与水之间，霉霉仿佛是第三种绝色…</p><h2 id="boldsymbol-Red"><a href="#boldsymbol-Red" class="headerlink" title="$\boldsymbol{Red}$"></a>$\boldsymbol{Red}$</h2><p>这张专辑绝对是霉霉音乐路上的一道里程碑，也是我最爱的专辑（づ￣3￣）づ╭❤～</p><p>首先强推的是<code>The Last Time</code>，你或许都没听说过霉霉有这首歌，但这首在我心里就是$Red$里最好的一首歌。</p><h3 id="color-red-boldsymbol-The-Last-Time"><a href="#color-red-boldsymbol-The-Last-Time" class="headerlink" title="$\color{red}{\boldsymbol{The~Last~Time}}$"></a>$\color{red}{\boldsymbol{The~Last~Time}}$</h3>        <div id="aplayer-anEzULKf" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-anEzULKf"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "The Last time",              author: "Taylor",              url: "Taylor Swift-Clean.flac",              pic: "/2019/02/14/Taylor-Swift/red.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>反正我最钟情于这种忧伤风hhh</p><h3 id="color-red-boldsymbol-All-Too-Well"><a href="#color-red-boldsymbol-All-Too-Well" class="headerlink" title="$\color{red}{\boldsymbol{All~Too~Well}}$"></a>$\color{red}{\boldsymbol{All~Too~Well}}$</h3>        <div id="aplayer-uYLvZTzC" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-uYLvZTzC"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "All Too Well",              author: "Taylor",              url: "Taylor Swift-All Too Well.flac",              pic: "/2019/02/14/Taylor-Swift/red.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>也是很喜欢的一首歌φ(≧ω≦*)♪</p><h3 id="color-red-boldsymbol-I-Knew-You-Were-Troublel"><a href="#color-red-boldsymbol-I-Knew-You-Were-Troublel" class="headerlink" title="$\color{red}{\boldsymbol{I~Knew~You~Were~Troublel}}$"></a>$\color{red}{\boldsymbol{I~Knew~You~Were~Troublel}}$</h3>        <div id="aplayer-EpULqrOq" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-EpULqrOq"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "I Knew You Were Troublel",              author: "Taylor",              url: "taylor swift - i knew you were trouble. (320CBR).mp3",              pic: "/2019/02/14/Taylor-Swift/red.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>这个不多说了……霉霉音乐史上最成功的几首歌之一qwq</p><h3 id="color-red-boldsymbol-Treacherous"><a href="#color-red-boldsymbol-Treacherous" class="headerlink" title="$\color{red}{\boldsymbol{Treacherous}}$"></a>$\color{red}{\boldsymbol{Treacherous}}$</h3>        <div id="aplayer-hCXDDSzM" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-hCXDDSzM"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Treacherous",              author: "Taylor",              url: "taylor swift - treacherous (original demo recording) (320CBR).mp3",              pic: "/2019/02/14/Taylor-Swift/red.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>这支曲子是我比较喜欢的一首$country$，这也可以看出$red$是一次大胆的尝试，因为是尝试所以不能舍弃之前已经积淀好的乡村音乐功底（比如这首歌），同时也会有对流行元素的大胆尝试（比如trouble）。</p><h3 id="color-red-boldsymbol-We-Are-Never-Ever-Getting-Back-Together"><a href="#color-red-boldsymbol-We-Are-Never-Ever-Getting-Back-Together" class="headerlink" title="$\color{red}{\boldsymbol{We~Are~ Never~ Ever~ Getting ~Back~ Together }}$"></a>$\color{red}{\boldsymbol{We~Are~ Never~ Ever~ Getting ~Back~ Together }}$</h3>        <div id="aplayer-NPzYwWqV" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-NPzYwWqV"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "we are never ever getting back together",              author: "Taylor",              url: "taylor swift - we are never ever getting back together (320CBR).mp3",              pic: "/2019/02/14/Taylor-Swift/red.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>比较奇怪的是，这首歌在国外的$top$上呼声格外高，霸榜无数，但是在中国反响却一般qwq</p><p>最后以一首$22$结尾叭~</p><h3 id="color-red-boldsymbol-22"><a href="#color-red-boldsymbol-22" class="headerlink" title="$\color{red}{\boldsymbol{22}}$"></a>$\color{red}{\boldsymbol{22}}$</h3>        <div id="aplayer-GZzswFsE" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GZzswFsE"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "22",              author: "Taylor",              url: "taylor swift - 22 (320CBR).mp3",              pic: "/2019/02/14/Taylor-Swift/red.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="撒fa"><a href="#撒fa" class="headerlink" title="撒fa~"></a>撒fa~</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="闲情逸致" scheme="http://www.orchidany.cf/tags/%E9%97%B2%E6%83%85%E9%80%B8%E8%87%B4/"/>
    
      <category term="Music" scheme="http://www.orchidany.cf/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>$CF\#536Div2$の题解($E\&amp;F$)</title>
    <link href="http://www.orchidany.cf/2019/02/08/CF-536Div2%E3%81%AE%E9%A2%98%E8%A7%A3-E-F/"/>
    <id>http://www.orchidany.cf/2019/02/08/CF-536Div2の题解-E-F/</id>
    <published>2019-02-07T16:11:14.000Z</published>
    <updated>2019-02-07T19:54:40.023Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CF-536Div2-の题解-E-amp-F"><a href="#CF-536Div2-の题解-E-amp-F" class="headerlink" title="$CF$#$536Div2$の题解($E\&amp;F$)"></a>$CF$#$536Div2$の题解($E\&amp;F$)</h1><h2 id="0x01-Preface"><a href="#0x01-Preface" class="headerlink" title="$0x01~~Preface$"></a>$0x01~~Preface$</h2><p>$emmm$这次CF本身打的很顺畅，但是居然unrated了……咕咕咕咕</p><p>这是头一次CF有比赛我全部题目都做了……可喜可贺可喜可贺233</p><p>简单总结一下前面四道题<a href="http://codeforces.com/contest/1106" target="_blank" rel="noopener">$\color{red}{Link}$</a>：</p><ul><li><p>A题：sb题，$O(n^2)$枚举的红题（或许都不到），但是我$check$的时候太粗心WA了一次<del>身败名裂XD</del></p></li><li><p>B题：sb题，一个模拟，需要一个可以处理优先级的数据结构（其实就是堆但是我一开始想的是线段树）</p></li><li>C题：sb题，一个贪心（其实是数学上可proof的数学题但被我当贪心题做了XD），大概就是你胡乱排个序之后胡搞一下就好。</li><li>D题：水题，思考一下可得，我们只需要写一个BFS+一个优先队列即可，因为无向图+随便走=胡搞八搞</li></ul><p>下面两道题就好像不是那么水了qaq</p><h2 id="0x02-E-cdot-text-Lunar-New-Year-and-Red-Envelopes"><a href="#0x02-E-cdot-text-Lunar-New-Year-and-Red-Envelopes" class="headerlink" title="$0x02~~E\cdot \text{Lunar New Year and Red Envelopes}$"></a>$0x02~~E\cdot \text{Lunar New Year and Red Envelopes}$</h2><h4 id="color-red-Link"><a href="#color-red-Link" class="headerlink" title="$\color{red}{Link}$"></a><a href="http://codeforces.com/contest/1106/problem/E" target="_blank" rel="noopener">$\color{red}{Link}$</a></h4><p>简单来说就是给$k$个区间，每个区间一个左端点$s$一个右端点$e$，同时还有一个蜜汁·右端点$t$。顺着时间线$1$~$n$，可以从$s_i$到$e_i$的时间内选择获得$w_i$的收益，但同时下次的选择必须在$t_i$之后。</p><p>最大化收益的思路下，有$m$次机会让选择者在某个时间点啥都不干。求最小的收益。</p><h4 id="mathfrak-Solution"><a href="#mathfrak-Solution" class="headerlink" title="$\mathfrak {Solution}$"></a>$\mathfrak {Solution}$</h4><p>呃，其实比较容易的发现就是个时间线$DP$。根据”$n$不大就DP$n$”的是指导思想（瞎扯的），我们应该按时间$DP$。那么第一步就是把每个区间的信息映射到时间线上去。这个时候有一个比较妙的$idea$。首先我们给每个区间的$s$和$e+1$在时间线上分别打上不同的标记，之后我们考虑沿时间线从前向后扫描每一段区间，每当遇到一个区间的$s$时就丢到一个$multiset$里面，反之遇到$e+1$时就$erase$。然后这样我们只顺便乱搞一下就可以得出每个时间点最优的方案。</p><p>之后？之后就直接$nm$的DP啊，毕竟$nm$只有$20million$那么大。</p><p>Ps:由于STL中multiset一删删一串的zz性质，改用map惹qaq</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 233</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">time_node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mark, d, w ;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> time_node &amp;T) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> w &gt; T.w || (w == T.w &amp;&amp; d &gt; T.d);</span><br><span class="line">&#125;</span><br><span class="line">&#125; base[MAXN] ; </span><br><span class="line"><span class="built_in">map</span> &lt;time_node, <span class="keyword">int</span>&gt; M_set ; </span><br><span class="line"><span class="built_in">vector</span>&lt;time_node&gt;Time[MAXN] ; <span class="keyword">long</span> <span class="keyword">long</span> Ans ;</span><br><span class="line"><span class="keyword">int</span> N, M, K, A, B, C, D, i, j ; <span class="keyword">long</span> <span class="keyword">long</span> dp[MAXN][MAXM] ;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K ;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">63</span>, <span class="keyword">sizeof</span>(dp)) ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= K ; ++ i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;A, &amp;B, &amp;C, &amp;D), </span><br><span class="line">        Time[A].push_back((time_node)&#123;<span class="number">1</span>, C, D&#125;) ;</span><br><span class="line">        Time[B + <span class="number">1</span>].push_back((time_node)&#123;<span class="number">2</span>, C, D&#125;) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; ++ i)&#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">int</span> tot = Time[i].size() ;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span> ; j &lt; tot ; ++ j) </span><br><span class="line">            <span class="keyword">if</span> (Time[i][j].mark == <span class="number">1</span>) ++ M_set[Time[i][j]] ; </span><br><span class="line">            <span class="keyword">else</span> M_set[Time[i][j]] &gt; <span class="number">1</span> ? M_set[Time[i][j]] -- : M_set.erase(Time[i][j]) ;</span><br><span class="line">        <span class="keyword">if</span> (M_set.size()) base[i] = (*M_set.begin()).first ; <span class="keyword">else</span> base[i] = (time_node)&#123;<span class="number">0</span>, i, <span class="number">0</span>&#125; ;</span><br><span class="line">    &#125;dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, Ans = dp[<span class="number">1</span>][<span class="number">1</span>] ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; ++ i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span> ; j &lt;= M ; ++ j)&#123;</span><br><span class="line">            j &gt; <span class="number">0</span> ? dp[i][j] = min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i][j]) : <span class="number">1</span> ;</span><br><span class="line">            dp[base[i].d][j] = min(dp[base[i].d][j], dp[i - <span class="number">1</span>][j] + base[i].w) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt;= M ; ++ i) Ans = min(Ans, dp[N][i]) ; <span class="built_in">cout</span> &lt;&lt; Ans &lt;&lt; <span class="built_in">endl</span> ; <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-F-cdot-text-Lunar-New-Year-and-a-Recursive-Sequence"><a href="#0x03-F-cdot-text-Lunar-New-Year-and-a-Recursive-Sequence" class="headerlink" title="$0x03~~F\cdot \text{Lunar New Year and a Recursive Sequence}$"></a>$0x03~~F\cdot \text{Lunar New Year and a Recursive Sequence}$</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="BSGS" scheme="http://www.orchidany.cf/tags/BSGS/"/>
    
      <category term="动态规划-普通DP" scheme="http://www.orchidany.cf/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%99%AE%E9%80%9ADP/"/>
    
      <category term="线性代数-矩阵" scheme="http://www.orchidany.cf/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%9F%A9%E9%98%B5/"/>
    
      <category term="CodeForces" scheme="http://www.orchidany.cf/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>$Lagrange ~Formula·$拉格朗日插值法</title>
    <link href="http://www.orchidany.cf/2019/02/07/Lagrange-Formula/"/>
    <id>http://www.orchidany.cf/2019/02/07/Lagrange-Formula/</id>
    <published>2019-02-07T10:06:40.000Z</published>
    <updated>2019-02-12T15:32:46.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="拉格朗日插值公式-rm-Lagrange-Interpolation-Formula"><a href="#拉格朗日插值公式-rm-Lagrange-Interpolation-Formula" class="headerlink" title="拉格朗日插值公式 $\rm{Lagrange~Interpolation~Formula}$"></a>拉格朗日插值公式 $\rm{Lagrange~Interpolation~Formula}$</h1><h2 id="rm-0x01-Preface"><a href="#rm-0x01-Preface" class="headerlink" title="$\rm{0x01~~} Preface$"></a>$\rm{0x01~~} Preface$</h2><p><strong>插值($Interpolaton$)</strong> 在多项式域中可以看做是<strong>求值$(Evaluation)$</strong>的逆运算，即给定$n$组确定的本质不同的二元组$(x_i, y_i)$，满足$F(x_i) = y_i$，可以逆向求出原$n$次多项式。</p><p>而其实，拉格朗日插值公式本身是标准的$\Theta(n^2)$算法——或者不能称其为算法，运算过程$\Theta(n^2)$或许会更准确一些。$Indeed$，该公式是构造出来的，所以没有多么繁琐的证明——</p><h2 id="rm-0x02-rm-Proof"><a href="#rm-0x02-rm-Proof" class="headerlink" title="$\rm{0x02}~~\rm{Proof}$"></a>$\rm{0x02}~~\rm{Proof}$</h2><h4 id="Proof-of-Existence"><a href="#Proof-of-Existence" class="headerlink" title="$Proof ~of~Existence$"></a>$Proof ~of~Existence$</h4><p>​    我们定义$F(x)$为一在实数域上的平凡$n-1$次多项式。</p><p>​    首先我们需要构造一个对于第$i​$个二元组的特殊多项式$L_i(x)​$，满足$$L_i(x_j) = \begin{cases}1, &amp;\rm{i=j} \ 0, &amp; \rm{i \neq j}\end{cases}​$$</p><p>那么我们所求的多项式$F(x)​$就可以写作$$F(x)  = \sum L_i(x_i)\cdot y_i​$$这个式子保证了我们对应的$n​$个二元组，$F(x)=y​$恒成立。</p><p>​    那么对于$L_i(x)​$，我们考虑由我们对$L_i(x)​$的定义可以得出$$L_i(x) = k_i(x-x_1)(x-x_2)\cdots(x-x_n)​$$其中不包含$x-x_i​$这一因式。而由$L_i(x_i)=1​$可知我们的比例系数$$k_i=\frac{1}{(x_i-x_1)(x_i-x_2)\cdots(x_i - x_{i-1})(x_i - x_{i+1})\cdots(x_i-x_n)}​$$那么$$L_i(x) = \prod\limits_{i=1, i \neq j}^{n}\frac{x - x_j}{x_i-x_j}​$$从而$$F(x)=\sum L_i(x)\cdot y_i(x) = y_i \cdot \prod\limits_{i=1, i \neq j}^{n}\frac{x - x_j}{x_i-x_j}​$$</p><h4 id="mathcal-Q-E-D"><a href="#mathcal-Q-E-D" class="headerlink" title="$\mathcal{Q.E.D.}$"></a>$\mathcal{Q.E.D.}$</h4><hr><h4 id="Proof-of-Uniqueness-1"><a href="#Proof-of-Uniqueness-1" class="headerlink" title="$Proof~of~Uniqueness^{[1]}$"></a>$Proof~of~Uniqueness^{[1]}$</h4><p>​    我们接下来要证明的是多项式$L_i(x)​$的唯一性</p><p>​    我们假设同时有两个实数域上的$n-1​$次多项式$L_1(x),L_2(x)​$满足$L_i(x_j) = \begin{cases}1, &amp;\rm{i=j} \ 0, &amp; \rm{i \neq j}\end{cases}​$，那么我们由作差法可以得出多项式$L_{\Delta} = L_1 - L_2​$在取所有的$x_i​$时，其值均为$0​$。那么一定会有多项式$$L’(x) = \prod\limits_{i=1}^{n}(x - x_i)​$$满足$$L’|L_{\Delta}​$$ 其中$|​$表示多项式整除。但是我们知道，对于$L’​$这个多项式，其次数为$n-1​$；而对于我们所定义的$L_i(x)​$，均为$(n-2)​$次的，从而$L_{\Delta}​$也是$n-2​$次多项式。所以我们可以得出$$L_{\Delta} = 0​$$从而有$$L_1=L_2​$$</p><h4 id="mathcal-Q-E-D-1"><a href="#mathcal-Q-E-D-1" class="headerlink" title="$\mathcal{Q.E.D.}$"></a>$\mathcal{Q.E.D.}$</h4><h2 id="rm-0x03-color-red-C-color-cyan-o-color-gold-d-color-green-e"><a href="#rm-0x03-color-red-C-color-cyan-o-color-gold-d-color-green-e" class="headerlink" title="$\rm{0x03~\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}}$"></a>$\rm{0x03~\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}}$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">题号：Luogu4781</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod 998244353</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ; LL Ans, xs ;</span><br><span class="line"><span class="keyword">int</span> N, i, j ; LL T, t, xv[MAXN], yv[MAXN] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">expow</span><span class="params">(LL A, LL B)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">while</span> (B)&#123;</span><br><span class="line">        <span class="keyword">if</span> (B &amp; <span class="number">1</span>) (res *= A) %= Mod ; </span><br><span class="line">        B &gt;&gt;= <span class="number">1</span>, (A *= A) %= Mod ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; T ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; ++ i) <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;xv[i], &amp;yv[i]) ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; ++ i)&#123;</span><br><span class="line">        t = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= N ; ++ j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span> ;</span><br><span class="line">            (t *= (xv[i] - xv[j] + Mod)) %= Mod ;</span><br><span class="line">        &#125;</span><br><span class="line">        t = expow(t, Mod - <span class="number">2</span>) ;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= N ; ++ j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span> ;</span><br><span class="line">            (t *= (T - xv[j] + Mod)) %= Mod ;</span><br><span class="line">        &#125;</span><br><span class="line">        (t *= yv[i]) %= Mod, (Ans += t) %= Mod ;</span><br><span class="line"><span class="comment">//cout &lt;&lt; Ans &lt;&lt; endl ;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, Ans) ; <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rm-Reference"><a href="#rm-Reference" class="headerlink" title="$\rm{Reference}$"></a>$\rm{Reference}$</h2><ul><li>$[1] $:Angel_Kitty的$blog$《拉格朗日插值法》 <a href="https://www.cnblogs.com/ECJTUACM-873284962/p/6833391.html" target="_blank" rel="noopener">$^{^{[\nearrow ]}}$</a></li></ul><h2 id="mathfrak-writter-pks"><a href="#mathfrak-writter-pks" class="headerlink" title="$\mathfrak{writter:pks}$"></a>$\mathfrak{writter:pks}$</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://www.orchidany.cf/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Math - Lagrange Formula" scheme="http://www.orchidany.cf/tags/Math-Lagrange-Formula/"/>
    
  </entry>
  
  <entry>
    <title>群论入门</title>
    <link href="http://www.orchidany.cf/2019/02/06/%E7%BE%A4%E8%AE%BA%E5%85%A5%E9%97%A8/"/>
    <id>http://www.orchidany.cf/2019/02/06/群论入门/</id>
    <published>2019-02-06T01:55:55.000Z</published>
    <updated>2019-02-06T03:53:32.514Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写在前面：群作为抽象代数领域中比较基础的一环，同时也是沟通初等代数、初等几何与抽象代数的桥梁，着实打开了笔者的眼界。此篇blog旨在泛泛谈一些比较基础的群论内容，包括群的基本定义，子群的概念，阶的概念等等，不存在较为艰深的内容。</p><h1 id="群"><a href="#群" class="headerlink" title="群"></a>群</h1><h2 id="1-群的定义"><a href="#1-群的定义" class="headerlink" title="$1~)~$群的定义"></a>$1~)~$群的定义</h2><p>比较简单的来讲，所谓<strong>群$(\rm{group})$</strong>指的是一类特殊的集合，这个集合包含一组元素和大于等于一个的运算，比如乘法群救记作$(G,\cdot)$。那么平凡来讲，群满足下列几个性质：</p><p>我们假定一个平凡的群$G$支持$\color{purple}{qwq}$这种运算：</p><h4 id="Property1-封闭性-forall-a-in-G-b-in-G-a-color-purple-qwq-b-in-G"><a href="#Property1-封闭性-forall-a-in-G-b-in-G-a-color-purple-qwq-b-in-G" class="headerlink" title="$Property1~~$封闭性$\forall a\in G, b\in G, a~\color{purple}{qwq}~b \in G$"></a>$Property1~~$封闭性$\forall a\in G, b\in G, a~\color{purple}{qwq}~b \in G$</h4><h4 id="Property2-运算的结合性-a-color-purple-qwq-b-color-purple-qwq-c-a-color-purple-qwq-b-qwq-c"><a href="#Property2-运算的结合性-a-color-purple-qwq-b-color-purple-qwq-c-a-color-purple-qwq-b-qwq-c" class="headerlink" title="$Property2~~$运算的结合性$(a~\color{purple}{qwq}~b) ~\color{purple}{qwq}~ c=a~\color{purple}{qwq}~ (b ~qwq~ c)$"></a>$Property2~~$运算的结合性$(a~\color{purple}{qwq}~b) ~\color{purple}{qwq}~ c=a~\color{purple}{qwq}~ (b ~qwq~ c)$</h4><h4 id="Property3-存在单位元（幺元）满足以下定义：-exists-e-in-G-s-t-forall-a-in-G-e-color-purple-qwq-a-a-color-purple-qwq-e-a"><a href="#Property3-存在单位元（幺元）满足以下定义：-exists-e-in-G-s-t-forall-a-in-G-e-color-purple-qwq-a-a-color-purple-qwq-e-a" class="headerlink" title="$Property3~~$存在单位元（幺元）满足以下定义：$\exists e\in G, s.t. \forall a\in G, e~\color{purple}{qwq}~ a=a~\color{purple}{qwq}~e=a$"></a>$Property3~~$存在单位元（幺元）满足以下定义：$\exists e\in G, s.t. \forall a\in G, e~\color{purple}{qwq}~ a=a~\color{purple}{qwq}~e=a$</h4><h4 id="Property4-对于每个元素，存在逆元，即满足-forall-a-in-G-exists-b-in-G-s-t-a-color-purple-qwq-b-b-color-purple-qwq-a-e"><a href="#Property4-对于每个元素，存在逆元，即满足-forall-a-in-G-exists-b-in-G-s-t-a-color-purple-qwq-b-b-color-purple-qwq-a-e" class="headerlink" title="$Property4~~$对于每个元素，存在逆元，即满足 $\forall a\in G, \exists b\in G, s.t. a~\color{purple}{qwq}~ b=b~\color{purple}{qwq}~a=e$"></a>$Property4~~$对于每个元素，存在逆元，即满足 $\forall a\in G, \exists b\in G, s.t. a~\color{purple}{qwq}~ b=b~\color{purple}{qwq}~a=e$</h4><p>那么也就是说的直白点吧，对所有的元素，做完该群所带有的<strong>带有结合律的运算</strong>之后，所得结果<strong>仍然属于该群</strong>且一定存在单位元，对于每个元素存在运算逆元。</p><p>那我们不妨定义一些其他的：</p><ul><li><h3 id="阿贝尔群-Abel-Group-：即交换群——运算满足交换律的群。"><a href="#阿贝尔群-Abel-Group-：即交换群——运算满足交换律的群。" class="headerlink" title="阿贝尔群$(Abel~ Group)$：即交换群——运算满足交换律的群。"></a>阿贝尔群$(Abel~ Group)$：即交换群——运算满足交换律的群。</h3></li><li><h3 id="半群：满足封闭性和结合律的群。"><a href="#半群：满足封闭性和结合律的群。" class="headerlink" title="半群：满足封闭性和结合律的群。"></a>半群：满足封闭性和结合律的群。</h3></li><li><h3 id="有限群-Finite-Group-：元素个数有限的群称为有限群-而有限群的元素个数称作有限群的阶"><a href="#有限群-Finite-Group-：元素个数有限的群称为有限群-而有限群的元素个数称作有限群的阶" class="headerlink" title="有限群$(Finite~Group)$：元素个数有限的群称为有限群,而有限群的元素个数称作有限群的阶"></a>有限群$(Finite~Group)$：元素个数有限的群称为有限群,而有限群的元素个数称作有限群的阶</h3></li></ul><p>结合几个例子来解释一下：</p><p>比如以下是几个乘法群 $$ (Q\setminus{0}~,~\cdot)$$, $$(R\setminus{0}~, ~\cdot)$$,$$ (C\setminus{0}~,~\cdot)$$</p><p>他们都不能包括$0$这个元素，因为这个元素显然是没有逆元的。</p><p>或者一个好玩儿的乘法群$$({1,-1}~~, ~~\cdot)​$$或者是所有<strong>非奇异的$n​$阶矩阵</strong>也可以组成一个乘法群。</p><p>或者是$$(Z~,~+)$$这个群比较经典$233$，其中我们借助这个来练习一下如何判断<strong>是否成群</strong>,首先思考，这个东西一定是封闭的，因为最后会收敛于$\pm \inf$所以一定封闭，其次运算是一定符合结合律的，然后单位元肯定就是$0$，最后逆元的话，对于$n$那就一定是$-n$了（紧扣定义即可）。</p><hr><p>$Extra \ \ Things :$</p><p>以下是两种复合抽代数据结构（名字自己起的$233$）：</p><h3 id="环：定义在两个运算上，-G-cdot-其中-G-是阿贝尔群，-G-cdot-是半群"><a href="#环：定义在两个运算上，-G-cdot-其中-G-是阿贝尔群，-G-cdot-是半群" class="headerlink" title="环：定义在两个运算上，$(G,+,\cdot)$其中$(G,+)$是阿贝尔群，$(G,\cdot)$是半群"></a>环：定义在两个运算上，$(G,+,\cdot)$其中$(G,+)$是阿贝尔群，$(G,\cdot)$是半群</h3><p>举例子：$Z$, $R[x]$，即整数环和$R$上的所有多项式的集合。</p><h3 id="域：同样定义在两个运算上，-F-cdot-其中-F-是阿贝尔群，-F-setminus-0-cdot-是阿贝尔群"><a href="#域：同样定义在两个运算上，-F-cdot-其中-F-是阿贝尔群，-F-setminus-0-cdot-是阿贝尔群" class="headerlink" title="域：同样定义在两个运算上，$(F,+,\cdot)$其中$(F,+)$是阿贝尔群，$(F\setminus{0},\cdot)$是阿贝尔群"></a>域：同样定义在两个运算上，$(F,+,\cdot)$其中$(F,+)$是阿贝尔群，$(F\setminus{0},\cdot)$是阿贝尔群</h3><p>举例子 ：$Q,R,C$即有理数域、实数域和复数域。</p><hr><p>好的，那我们尝试证明两个命题：</p><h3 id="Proposition1-一个群中的单位元唯一"><a href="#Proposition1-一个群中的单位元唯一" class="headerlink" title="$Proposition1~~~~$一个群中的单位元唯一"></a>$Proposition1~~~~$一个群中的单位元唯一</h3><p>设有两个单位元$e_1,e_2$</p><p>那么$e_1=e_1e_2=e_2$，其实是一个$233$</p><h3 id="Proposition2-群中元素的逆元唯一"><a href="#Proposition2-群中元素的逆元唯一" class="headerlink" title="$Proposition2~~~~$群中元素的逆元唯一"></a>$Proposition2~~~~$群中元素的逆元唯一</h3><p>以乘法群为例，假设$a$有两个逆元$b,c$，那么一定会有$$b = b \cdot(a \cdot c) = (b \cdot a) \cdot c = c$$</p><p>显然也是同一个。</p><p>那么此时我打算整理一个群的共性特征：<br>$$(ab)^{-1}=b^{-1}a^{-1}$$</p><p>很显然，证明如下：<br>$$ab(b^{-1}a^{-1})=b^{-1}a^{-1})ab=e$$</p><p>提这个的目的就是，我们发现在矩阵的相关内容里面也有这件事儿~所以就很开心</p><p>那么之后我们讨论<strong>周期</strong></p><p>对于一个元素$a \in G$而言，我们记$a$的周期是$o(a)$</p><p>$o(a)$表示最小正整数，使得$a^{o(a)}=e$</p><hr><h2 id="2-子群及衍生"><a href="#2-子群及衍生" class="headerlink" title="$2~)~$子群及衍生"></a>$2~)~$子群及衍生</h2><p>本节所指<strong>“群”</strong>没有特别说明便均为<strong>有限群</strong></p><p>不妨先给出子群的浅显版定义：</p><h3 id="如果对于一个群-G-C-，其中-H-subseteq-G-，且-H-C-是群，那么我们称在运算-C-下，-H-是-G-的子群，用-H-leq-G-表示"><a href="#如果对于一个群-G-C-，其中-H-subseteq-G-，且-H-C-是群，那么我们称在运算-C-下，-H-是-G-的子群，用-H-leq-G-表示" class="headerlink" title="如果对于一个群$(G, C)$ ，其中$H\subseteq G$,，且 $(H,C)$是群，那么我们称在运算$C$下，$H$是$G$的子群，用$H\leq G$表示"></a>如果对于一个群$(G, C)$ ，其中$H\subseteq G$,，且 $(H,C)$是群，那么我们称在运算$C$下，$H$是$G$的子群，用$H\leq G$表示</h3><p>那么从而我们可以定义<strong>生成子群</strong>这个东西：</p><p><strong>生成子群：若$S \subseteq G​$， 并且对于运算$C​$而言，$(G,C)​$也是一个群，那么就称$G​$为集合$S​$在运算$C​$下的生成子群。集合$S​$的生成子群用$&lt;​$$S​$$&gt;​$表示</strong></p><p>这之后我们就可以定义<strong>陪集</strong>这个概念</p><p>陪集一般上包含<strong>左陪集</strong>和<strong>右陪集</strong>。</p><h3 id="左陪集：如果-H-leq-G-，对于-a-in-G-，定义集合-H-a-x-in-G-exists-h-in-H-ah-x-为-H-的与元素-a-左陪集。"><a href="#左陪集：如果-H-leq-G-，对于-a-in-G-，定义集合-H-a-x-in-G-exists-h-in-H-ah-x-为-H-的与元素-a-左陪集。" class="headerlink" title="左陪集：如果$H \leq G$，对于$a \in G$，定义集合$H_a = {x\in G~|~ \exists h\in H, ah=x}$为$H$的与元素$a$左陪集。"></a>左陪集：如果$H \leq G$，对于$a \in G$，定义集合$H_a = {x\in G~|~ \exists h\in H, ah=x}$为$H$的与元素$a$左陪集。</h3><h3 id="右陪集：-如果-H-leq-G-，对于-a-in-G-，定义集合-H-a-x-in-G-exists-h-in-H-ha-x-为-H-的右陪集。"><a href="#右陪集：-如果-H-leq-G-，对于-a-in-G-，定义集合-H-a-x-in-G-exists-h-in-H-ha-x-为-H-的右陪集。" class="headerlink" title="右陪集： 如果$H \leq G$，对于$a \in G$，定义集合$H_a = {x\in G~|~ \exists h\in H, ha=x}$为$H$的右陪集。"></a>右陪集： 如果$H \leq G$，对于$a \in G$，定义集合$H_a = {x\in G~|~ \exists h\in H, ha=x}$为$H$的右陪集。</h3><p>$233$也可以叫做<strong>傍集</strong>或者<strong>旁系</strong>之类的~</p><p>那么我们这个地方先只研究右陪集$233$</p><h4 id="Lemma1"><a href="#Lemma1" class="headerlink" title="$Lemma1:$"></a>$Lemma1:$</h4><p>我们首先证明一点：$|H|=|H_a|$，其中长得像绝对值符号的竖线表示的是有限群的<strong>群中元素数量</strong>。 </p><p>这个其实比较显然，因为事实上群都是定义在<strong>非可重集</strong>上面的。</p><p>较为严谨的证明如下：</p><hr><p>$Proof.$</p><p>对于$H \leq G$，如果$h_1\neq h_2 \in H$，那么$h_1a\neq h_2a$</p><p>反证：若$h_1a=h_2a$，$h_1aa^{-1}=h_2aa^{-1},~h_1=h_2$矛盾</p><p>对于不同的$h$，$ha$互不相同，因此$|H_a|=|H|$</p><hr><h4 id="Lemma2"><a href="#Lemma2" class="headerlink" title="$Lemma2:$"></a>$Lemma2:$</h4><p>之后我们再证明一些好玩儿的：</p><p>命题：$H_a=H_b$当且仅当$ab^{-1}\in H$ </p><p>看起来好像不是那么好玩……</p><hr><p>$Proof.$</p><p>若$H_a=H_b$，则$ea\in H_a$，即$a\in H_b$，那么$\exists h\in H,~a=hb$,那么$ab^{-1}=h$</p><p>若$ab^{-1}\in H$，那么$ha=ha(b^{-1}b)=(hab^{-1})b\in Hb$，因此$H_a\subseteq H_b$</p><p>$hb=hb(a^{-1}a)=h(ab^{-1})^{-1}a\in H_a$，故$H_b\subseteq H_a$</p><p>因此$H_a=H_b$</p><hr><p>那么我们还可以有一个推论：</p><p>若$H_a\neq H_b$，那么$H_a\cap H_b = \emptyset$</p><hr><p>$Proof.$</p><p>假设$x\in H_a\cap H_b$， 则$\exists h_1,h_2\in H$，$h_1a=h_2b=x$ ， 那么$ab^{-1}=h_1^{-1}h_2\in H$，那么$H_a=H_b$，矛盾</p><hr><p>从而还可以有个定理（$Lagrange$定理）：</p><p>由于$\forall g\in G$， $g\in Hg$，所以$G$中每个元素都在某个傍集中。用$[G:H]$表示不同的傍集数，那么</p><p>$$|G|=|H|\cdot [G:H]$$</p><p>也就是说$|H|$是$|G|$的约数。</p><p>这个其实很显然，因为不同元素的傍集如果不同就不会有交集，如果相同就不会被考虑到$[G:H]$里面。所以结论平凡。</p><p>但是其实这是个很伟大的定理$233$ </p><hr><p>好的，那么从而就会有一些神奇的推论：</p><p><strong>推论一 ： 对于一个元素$a \in G$，$G$是一个群，那么$o(a) | |G|$ </strong></p><p><strong>$Proof.$</strong> 因为$o(a) = |$$&lt;$$a$$&gt;$$|$，由我们刚刚证明的定理可以得出$o(a) | |G|$ </p><p><strong>推论二：对任意的$a \in G,a ^{|G|} = e$</strong></p><p>$Proof.$ 比较显然，由推论一可知。</p><p><strong>推论三：若$|G|$为素数，则$G$是循环群</strong></p><p>$Proof.$ 若$a \neq e$，那么会有$|$$&lt;$$a$$&gt;$$|$整除$|G|$。而由于$|G|$是个素数，所以只有可能$|G| = |$$&lt;$$a$$&gt;$$|$ ，所以$G$是个循环群。</p><p>接下来我们真的要去做些好玩的了~</p><hr><h3 id="定理-1-·-Fermat-小定理"><a href="#定理-1-·-Fermat-小定理" class="headerlink" title="定理$1$·$Fermat$小定理"></a>定理$1$·$Fermat$小定理</h3><p>如果$p$为素数，那么存在$a^{p-1} \equiv 1 (\mod p) $</p><h3 id="Proof"><a href="#Proof" class="headerlink" title="$Proof. $"></a>$Proof. $</h3><p>考虑质数$p$，考虑群$G=${$1,2,\dots,p-1$}，群的运算定义为对$p$取模的乘法，那么由$Lagrange$可知：</p><p>$$\forall a\in G, a^{p-1}=1(\mod p)$$ </p><h3 id="定理2·-Euler-定理"><a href="#定理2·-Euler-定理" class="headerlink" title="定理2·$Euler$定理"></a>定理2·$Euler$定理</h3><p>$a^{\phi(n)}=1 (\mod n)$</p><h3 id="Proof-1"><a href="#Proof-1" class="headerlink" title="$Proof.$"></a>$Proof.$</h3><p>考虑$n\in N^{+}$，考虑群$G=$ {$1\leq x\leq n~|~gcd(x,n)=1$ },群的运算定义为对$n$取模的乘法</p><p>那么会有$|G|=\phi(n)$，从而有：</p><p>$$\forall a\in G, a^{\phi(n)}=1 (\mod n)$$</p><hr><p>没错，证明十分的简洁美观。</p><p>作者被这种神奇的证明给折服了$stO$.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="抽象代数-群论" scheme="http://www.orchidany.cf/tags/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0-%E7%BE%A4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>$\rm{BSGS-Junior}·$BSGS算法初探</title>
    <link href="http://www.orchidany.cf/2019/02/06/BSGS-junior/"/>
    <id>http://www.orchidany.cf/2019/02/06/BSGS-junior/</id>
    <published>2019-02-05T23:48:17.000Z</published>
    <updated>2019-02-14T14:17:29.009Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BSGS"><a href="#BSGS" class="headerlink" title="$BSGS$"></a>$BSGS$</h1><h2 id="rm-0x01-mathcal-Preface"><a href="#rm-0x01-mathcal-Preface" class="headerlink" title="$\rm{0x01}$  $\mathcal{Preface}$"></a>$\rm{0x01}$  $\mathcal{Preface}$</h2><p><strong>$\rm{BSGS}(Baby~Step~Giant~Step)$, 大步小步法</strong>。当然也会被叫做<strong>拔山盖世</strong>、<strong>北上广深</strong>算法……咳，这并不重要。形式化地讲， $\rm{BSGS}$算法主要用来解决以下问题 : </p><h4 id="给定质数-p-整数-a-b-a-p-1-求最小的非负整数-x​-使得-a-x≡-b-mod-p-​"><a href="#给定质数-p-整数-a-b-a-p-1-求最小的非负整数-x​-使得-a-x≡-b-mod-p-​" class="headerlink" title="给定质数$p$, 整数$a, b$, $(a, p)=1$.求最小的非负整数$x​$, 使得$a^x≡ b~(\mod p)​$"></a>给定质数$p$, 整数$a, b$, $(a, p)=1$.求最小的非负整数$x​$, 使得$a^x≡ b~(\mod p)​$</h4><p>而首先我们知道的，是由欧拉定理$a ^{\varphi(p)} ≡ 1 ~(\mod p)​$，并且我们还知道$a^0=1≡1  ~(\mod p)​$，所以我们可以得出一个断言：</p><p><strong>如果方程$a^x≡ b~(\mod p)​$有最小非负整数解，那么最小非负整数解一定在$[0, \varphi(p))​$中</strong> $\qquad \qquad(1) ​$</p><p>此处肉眼可以看出其循环节为$\varphi(p)$，不再证明。</p><p>之后我们将以此为基础进行类似分块的操作——</p><h2 id="rm-0x02-Baby-Step-Giant-Step"><a href="#rm-0x02-Baby-Step-Giant-Step" class="headerlink" title="$\rm{0x02~~Baby~Step~Giant~Step}$"></a>$\rm{0x02~~Baby~Step~Giant~Step}$</h2><p>首先我们记$n=\sqrt {\varphi(p)}$，那么$\forall x \in [0, \varphi(p))$, $x = i\times m+j$, $i \leq  \lfloor \frac{p−1-m}{m} \rfloor,~~ 0≤j &lt;m$ 。那么对于原方程我们可以把其改为：$$a^{i\cdot n+j}≡ b~(\mod p)$$移一下项就可以变成$$a^j ≡b \cdot a^{-i\cdot n} (\mod p)$$那么现在我们的策略是算出所有$a^j$来，在$\mod p$  意义下观察是否有一个$i$使得$a^j ≡b \cdot a^{-i\cdot n} (\mod p)$。我们称左边枚举$a^j$叫做<strong>小步$(\rm{Baby~Step})$</strong>，  称右边枚举$b \cdot a^{-i\cdot n}$叫做<strong>大步$~(\rm{Giant~Step})$</strong>。</p><p>那么其实算法流程很明晰了，我们只需要循环两次、第一次记录的$a^j$用哈希表（$STL$自带$unordered$_ $map$）记录一下即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">expow</span><span class="params">(LL a, LL b, LL p)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">while</span> (b)&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) </span><br><span class="line">            (res *= a) %= p ;</span><br><span class="line">        (a *= a) %= p, b &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % p ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bsgs</span><span class="params">(LL x, LL y, LL p)</span></span>&#123;</span><br><span class="line">    P = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p)), Hash.clear(), Q = expow(x, -P + <span class="number">2</span> *(p - <span class="number">1</span>), p) ;</span><br><span class="line">    <span class="comment">//a ^ (p-1) = 1 (mod p) =&gt; Q = a^(-P) = a ^(-P + p -1) ;</span></span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>, j = <span class="number">0</span> ; j &lt; P ; ++ j, (i *= x) %= p) </span><br><span class="line">        <span class="keyword">if</span> (!Hash.count(i)) Hash[i] = j ; <span class="comment">// Push them into hash_table</span></span><br><span class="line">    <span class="keyword">for</span> (LL i = y, j = <span class="number">0</span>  ; j &lt;= P ; ++ j, (i *= Q) %= p) </span><br><span class="line">        <span class="keyword">if</span> (Hash.count(i))&#123; <span class="built_in">cout</span> &lt;&lt; Hash[i] + j * P &lt;&lt; <span class="built_in">endl</span> ; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中细节还是有的：</p><ul><li><p>计算<code>sqrt</code>时要上<strong>取整</strong>。</p></li><li><p>我们在求$a^{-i\cdot n}​$时用的底变量需要由费马小定理求快速幂得出。但是此时指数上可能为负数，所以我们选择加上一个模数，不影响结果。</p></li><li>两次循环枚举的边界要注意有的是$\leq$有的是$&lt;$</li><li>算法还没开始时，要判断本身$a$是否可以被$P$整除。如果不特判这种情况的话，我们上面代码中的<code>Q</code>就会<code>=0</code>，从而在下面的第二个循环处出错——我们的<code>hash[i]</code>和<code>j</code>不能同时为$0$，从而输出错误的答案。</li></ul><h2 id="rm-0x03-例题"><a href="#rm-0x03-例题" class="headerlink" title="$\rm{0x03}$   例题"></a>$\rm{0x03}$   例题</h2><p>$T1~$<a href="https://www.luogu.org/problemnew/show/P4028" target="_blank" rel="noopener">$LuoguP4028$</a></p><p>裸题，但是有很多坑……或者说上面列举的细节都涵盖了qaq</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tr1/unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ; </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tr1 ; <span class="keyword">int</span> T ;</span><br><span class="line">LL A, B, M, P, Q ; <span class="built_in">unordered_map</span> &lt;LL, LL&gt; Hash ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">expow</span><span class="params">(LL a, LL b, LL p)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">while</span> (b)&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) </span><br><span class="line">            (res *= a) %= p ;</span><br><span class="line">        (a *= a) %= p, b &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % p ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bsgs</span><span class="params">(LL x, LL y, LL p)</span></span>&#123;</span><br><span class="line">    P = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p)), Hash.clear(), Q = expow(x, -P + <span class="number">2</span> *(p - <span class="number">1</span>), p) ;</span><br><span class="line">    <span class="comment">//a ^ (p-1) = 1 (mod p) =&gt; Q = a^(-P) = a ^(-P + p -1) ;</span></span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>, j = <span class="number">0</span> ; j &lt; P ; ++ j, (i *= x) %= p) </span><br><span class="line">        <span class="keyword">if</span> (!Hash.count(i)) Hash[i] = j ; <span class="comment">// Push them into hash_table</span></span><br><span class="line">    <span class="keyword">for</span> (LL i = y, j = <span class="number">0</span>  ; j &lt;= P ; ++ j, (i *= Q) %= p) </span><br><span class="line">        <span class="keyword">if</span> (Hash.count(i))&#123; <span class="built_in">cout</span> &lt;&lt; Hash[i] + j * P &lt;&lt; <span class="built_in">endl</span> ; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Couldn't Produce!"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">qr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span> ; <span class="keyword">char</span> c = getchar() ; <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) res = (res &lt;&lt; <span class="number">1</span>) + (res &lt;&lt; <span class="number">3</span>) + c - <span class="number">48</span>, c = getchar() ;</span><br><span class="line">    <span class="keyword">return</span> res ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T ;</span><br><span class="line">    <span class="keyword">while</span> (T --)&#123;</span><br><span class="line">        M = qr(), A = qr(), B = qr() ;</span><br><span class="line">        <span class="keyword">if</span> ((!(A % M == <span class="number">0</span> &amp;&amp; B))) bsgs(A, B, M) ;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Couldn't Produce!"</span> &lt;&lt; <span class="built_in">endl</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$T2~$ <a href="https://www.luogu.org/problemnew/show/P3846" target="_blank" rel="noopener">$TJOI2007~Cute~Prime​$</a></p><p>最裸最裸的、无特判的题……可以水一下双倍经验。</p><h2 id="mathfrak-writter-pks"><a href="#mathfrak-writter-pks" class="headerlink" title="$\mathfrak{writter: pks}$"></a>$\mathfrak{writter: pks}$</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="BSGS" scheme="http://www.orchidany.cf/tags/BSGS/"/>
    
      <category term="学习笔记" scheme="http://www.orchidany.cf/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>$LCT&#39;s ~Junior ~Intro·$LCT入门</title>
    <link href="http://www.orchidany.cf/2019/02/04/LCT-s-Junior-Intro/"/>
    <id>http://www.orchidany.cf/2019/02/04/LCT-s-Junior-Intro/</id>
    <published>2019-02-04T15:18:58.000Z</published>
    <updated>2019-02-12T15:33:04.527Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rm-0x01-闲话-·-LCT-的用途以及具体思路"><a href="#rm-0x01-闲话-·-LCT-的用途以及具体思路" class="headerlink" title="$\rm{0x01}$ 闲话 · $LCT$的用途以及具体思路"></a>$\rm{0x01}$ 闲话 · $LCT$的用途以及具体思路</h1><p>咳，其实在我最近只是浅浅地学了一部分的基础上，窝觉得$LCT$其实就是一个用来维护<strong>森林连通性</strong>的。</p><p>嗯……因为其独特的性质所以也可以顺便维护好多东西，什么链上的最大值啊，链上的权值和啊……都可以维护——或者说，LCT是更加全能的树剖。</p><p>但其实吧……$LCT$打板子是很简单的，但是真正理解却一点儿也不简单。因为本身$splay$就很麻烦了，况且$splay$之前一直用于维护数列。要知道，此处的$splay$可是作为<strong>辅助树</strong>，维护一整个森林，并且可以支持序列中几乎全部操作——这就大大增高了理解难度。举个例子，你曾经认为已经难以理解、或者说不可以做的、比较复杂的区间翻转<a href="https://www.luogu.org/problemnew/show/P3391" target="_blank" rel="noopener">$Luogu3391$</a>，在$LCT$里面有十分全面的涉及，但是被精简到了只有两行是用来描述这个内容的。显而易见的是，$LCT$虽然常数十分的大，但代码十分的短，比一棵完整的平衡树短了不少（实测50+行），与$FFT$一样具有着华丽的可观赏性，但是隐藏在之后的思维难度同样不可小觑。</p><p>也就是说我们是不是学的太草率、太浮躁了呢？快餐式地学完$LCT$，网上的每一篇博客都包教包会。但是我今天要整理的，是对于$LCT$真正的理解。希望各位看到这篇拙作的人可以获得一些什么。</p><h1 id="rm-0x02-闲话-·-关于-rm-splay"><a href="#rm-0x02-闲话-·-关于-rm-splay" class="headerlink" title="$\rm{0x02}$ 闲话 · 关于$\rm{splay}$"></a>$\rm{0x02}$ 闲话 · 关于$\rm{splay}$</h1><p>道理我都懂，要想动态拆删一些东西，辅助树的形态可以改变是先决条件。看上去平衡树好像是个不错的选择，但是，选哪个作为辅助树呢？<del>后宫佳丽三千我该翻谁的牌子呢</del></p><p>历史的重任最后落到了$\rm{splay}​$的身上。然后$\rm{splay}​$他居然：</p><p><img src="t1.jpg" alt=""></p><p>他甚至还：</p><p><img src="t2.png" alt=""></p><p>……</p><p>好吧，由于某些<del>rqy也不知道的</del>原因，如果不用$\rm{splay}$的话，复杂度是均摊$\Theta(\rm{nlog^2n})$, 而用$\rm{splay}$就可以做到均摊$\Theta(\rm{nlogn})$ ……但事实上，splay确实有他独特的性质，比如旋转到根啊之类的，比起其他种类的平衡树而言，更加适合$LCT$</p><h1 id="rm-0x03-LCT-的思路和基础操作"><a href="#rm-0x03-LCT-的思路和基础操作" class="headerlink" title="$\rm{0x03}$   $LCT$的思路和基础操作"></a>$\rm{0x03}$   $LCT$的思路和基础操作</h1><h2 id="一-主要思路"><a href="#一-主要思路" class="headerlink" title="一 主要思路"></a>一 主要思路</h2><p>主要思路嘛……大概是基于<strong>实链剖分</strong>的操作。</p><p><strong>朴素的树剖是重链剖分</strong>，大体上就是将整棵树的链划分为轻边和重链，运用巧妙的性质做到$log$级别。而遗憾的是$LCT$维护的是森林的连通性，所以只能采用实链剖分。</p><p>而实链剖分大体上就是把边分为<strong>虚边</strong>和<strong>实边</strong>。其中实边串联起一个联通块，同一组实边存在、且仅存在于一棵$\rm{splay}$中。$\rm{splay}$和$\rm{splay}$之间由虚边相连。</p><p>实链剖分的好处呢？在于<strong>实链剖分是一种动态剖分</strong>，他可以<strong>随意改变边的虚实属性</strong>。而显然，重链剖分由于有着足够的理论依据和逻辑推演，所以轻重链是难以更改，或者说，不可更改的。So，实链剖分为动态树的动态打下了基础。</p><p>那么接下来我们来看一个$LCT​$是如何定义的:</p><ul><li>首先，一棵$LCT​$管控的是一对分散的点，点以几棵分散的$splay​$的形式聚集。起初整棵$LCT​$是没有任何联系的，各自为战，各自为根。我们接下来会看到的$access​$、$makeroot​$等操作，都是在自己的联通块儿内部进行的操作。换句话讲，$LCT​$维护的是有根森林，即组成森林的每个联通块都有其唯一的根。</li><li>实边串联起一个联通块，同一组实边存在、且仅存在于一棵$\rm{splay}$中。$\rm{splay}$和$\rm{splay}$之间由虚边相连。只有实边是有效的，虚边可以被认为不存在。<strong>但是两种边都没有用到显式存储</strong>，都是通过splay中的$Son$数组和$Fa$数组访问的。但虚边和实边的存储有区别：</li><li>虚边是认父不认子，即如果$Fa[x]==y$，那么$y$不存$x$这个儿子，但是$x$存$y$这个父亲。这样做是为了可以$Access$——因为其实在$Access$的子函数$splay$里，发挥作用的实际上是$Fa$指针。</li><li>实边是完整的双向存储。</li><li>$\rm{splay}$中维护的是一条从存储上到下按在原树中深度严格递增的路径，且中序遍历$\rm{splay}$得到的每个点的深度序列严格递增。换句话讲，一个$\rm{splay}$里面不会出现在原联通块儿（树）中深度相同的两个点。在一棵$\rm{splay}$中，键值就是原树中的深度。</li><li>如果$x$是它所在$splay$的最左边的点，那么它在原森林里的父亲是$x$所在$splay$的根的$fa$, 否则就是$x$在$splay$上的前驱.</li></ul><h2 id="二-基础操作"><a href="#二-基础操作" class="headerlink" title="二 基础操作"></a>二 基础操作</h2><p>$emm$所谓基础操作大概就是每个用到$LCT$的题几乎都要用到的操作，我们这个地方先把点$n$所在联通块儿内的树的根记作$root(n) $，把与$n$以实边相连的儿子记作实儿子。</p><ul><li><h2 id="rm-1-Access"><a href="#rm-1-Access" class="headerlink" title="$\rm{1}$  $Access$"></a>$\rm{1}$  $Access$</h2></li></ul><p>这个操作有着很迷的性质，其时间复杂度是均摊$\log n$的。而这个操作的目的是<strong>$Access(n)$表示从$root(n)$向$n$打通一条实链，并以$n$点为最深度最大的点、$root(n)$为深度最小的点形成一棵$\rm{splay}$</strong>。</p><p>不难看出，这个操作其实跟是一种<strong>逻辑层面的自我调控，没有改变原树的结构。</strong></p><p>我们思考，如果此时我们$Access​$完点$n​$之后，理论上来讲，$n​$点应该不再有实儿子了——显然，如果有实儿子的话，$splay​$中是应该包含这个实儿子的——而这就不符合$n​$是$\rm{splay}​$中深度最大的点的性质了。而因为在splay中，点是以深度为键值的，所以我们要每次砍掉$\rm{splay}​$中的右儿子——即砍掉原来的实儿子，并把刚刚诞生的$\rm{splay}​$连上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> qwq = <span class="number">0</span> ; x ; x = T[qwq = x].F) </span><br><span class="line">splay(x), rc = qwq, update(x) ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这就是$Access​$了。</p><ul><li><h2 id="2-Make-Root"><a href="#2-Make-Root" class="headerlink" title="$2 ~~Make~ Root~$"></a>$2 ~~Make~ Root~$</h2></li></ul><p>$make_root​$先从原来的根向$n​$打通一条路径，然后$splay​$上去，最后$reverse​$一下。此处由于一开始$n​$的深度最大，$splay​$之后深度依旧最大，但此时$n​$是$splay​$的根，所以$reverse(n)​$就相当于翻转了整条树上的链，那么翻转之后，$n​$的深度就变成了最小，于是就是这个联通块儿的根节点了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc T[x].Son[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc T[x].Son[1]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> F, Son[<span class="number">2</span>], R, S ;</span><br><span class="line">&#125;T[MAXN] ; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; lc ^= rc ^= lc ^= rc, T[x].R ^= <span class="number">1</span> ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (!T[x].R) <span class="keyword">return</span> ; T[x].R = <span class="number">0</span> ; <span class="keyword">if</span> (lc) reverse(lc) ; <span class="keyword">if</span> (rc) reverse(rc) ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rooten</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Access(x), splay(x), reverse(x) ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> qwq = x ; stk.push(qwq) ;</span><br><span class="line"><span class="keyword">while</span>(check(qwq)) qwq = T[qwq].F, stk.push(qwq) ;</span><br><span class="line"><span class="keyword">while</span>(!stk.empty()) push_down(stk.top()), stk.pop() ;</span><br><span class="line"><span class="keyword">while</span>(check(x))&#123;</span><br><span class="line"><span class="keyword">int</span> fa = T[x].F, g_fa = T[fa].F ;</span><br><span class="line"><span class="keyword">if</span> (check(fa)) rotate((T[g_fa].Son[<span class="number">1</span>] == fa) == (T[fa].Son[<span class="number">1</span>] == x) ? fa : x) ; rotate(x) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处$splay$中由于要下放标记，保证树的形态是正确的，所以我们用一个$stack$存一下，顺序下放标记。</p><ul><li><h2 id="3-Merge"><a href="#3-Merge" class="headerlink" title="$3 ~Merge~$"></a>$3 ~Merge~$</h2></li></ul><p>此处的$Merge(x, y)$的意义是，拉起$x,y$中间的链，形成一个$splay$。这里就直接$Mkroot$一遍，然后$Access$即可。让哪个点当根应该都可以，只不过多$splay$几次可以保证优（毒）秀（瘤）的复（大）杂（常）度（数）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; Rooten(x), Access(y), splay(y) ; &#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="4-Link-amp-Cut"><a href="#4-Link-amp-Cut" class="headerlink" title="$4~~Link~\&amp;~Cut$"></a>$4~~Link~\&amp;~Cut$</h2></li></ul><p>如果保证$Link$和$Cut$都是合法的操作的话，$Link$直接连，$Cut$直接删即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; Rooten(x) ;  T[x].F = y ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; Merge(x, y) ; T[x].F = T[y].Son[<span class="number">0</span>] = <span class="number">0</span> ;&#125;</span><br></pre></td></tr></table></figure><p>此处$Link$必须先$Mkroot$一下，否则树链就断了。连的是虚边（因为连实边就会改变原来$splay$的割据）；$Cut$必须先$split$一下，保证两个点之间在同一棵$splay$中，加之我们的$Merge$操作中，一开始把$x$给$mkroot$了，再把$y$点$splay$上去，直接导致了现在$x$应该是$y$的孩子——于是就很开心的，可以直接$cut$了。        </p><p>但事实上，天不遂人意……有时候这条边并不存在，盲目删除的话会导致$GG$，盲目连边的话也会导致树的形态爆炸，所以我们要进行一波操作……</p><ul><li>$New-Link$ </li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; Rooten(x) ; <span class="keyword">if</span>(Find(y) != x) T[x].F = y ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; Access(x), splay(x) ; <span class="keyword">while</span>(lc) push_down(x), x = lc ; splay(x) ; <span class="keyword">return</span> x ;&#125;</span><br></pre></td></tr></table></figure><p>此处的意义在于，如果我们发现两个点在一个子树里面，连接它们就破坏了树的性质。$Find$就是无比普通的$Find$。。。。233</p><p>但要注意啊，$Find$找的是原树中的根，不是$splay$。由于原树中根的深度一定最小，所以应该是$splay$中最靠左的点……所以不断找左儿子。</p><p>多$BB$一句，这个地方一定注意啊！$Find$只改变了$splay$的形态，$mkroot$改变的是原树中的根</p><ul><li>$New-Cut$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; </span><br><span class="line">Rooten(x) ; </span><br><span class="line"><span class="keyword">if</span> (Find(y) != x || T[y].Son[<span class="number">0</span>] || T[y].F != x) <span class="keyword">return</span> ; </span><br><span class="line">T[y].F = T[x].Son[<span class="number">1</span>] = <span class="number">0</span>, update(x) ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处首先我们要判一下这两个点是不是直接相连。是否直接相连……在一棵$splay$中的体现，要克服两个问题，第一是要判断是否连通，还是$Find$操作。</p><p>之后我们需要判断是否满足恰好相隔一条边——注意，首先因为代码中的$x$比$y$在原树位置靠上（$Rooten$了$x$），在$splay$中靠左，那么如果$y$有左儿子的话，说明一定有$Depth(x) &lt; Depth(y\text{的左儿子们})  &lt; Depth(y)$，其中$Depth$表示原树深度。那么此时原树中$x$和$y$之间，一定隔着一些节点。考虑树的性质，两点之间有且仅有一条简单路径——所以当$T[y].Son[0]$不指向$Null$时，$x$和$y$之间没有一条边，不能直接$Cut$。</p><p>剩下的就很简单了，$T[y].F$应该是$x$，否则也不是直接相连。</p><ul><li><h2 id="5-Rotate-中的坑点"><a href="#5-Rotate-中的坑点" class="headerlink" title="5 $~Rotate$中的坑点"></a>5 $~Rotate$中的坑点</h2></li></ul><p>呃……其实就一处而已。就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> T[T[x].F].Son[<span class="number">0</span>] == x || T[T[x].F].Son[<span class="number">1</span>] == x ;  &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fa = T[x].F, g_fa = T[fa].F, W = x == T[fa].Son[<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">if</span> (check(fa)) T[g_fa].Son[T[g_fa].Son[<span class="number">1</span>] == fa] = x ; T[x].F = g_fa ;</span><br><span class="line">T[fa].Son[W] = T[x].Son[W ^ <span class="number">1</span>], T[T[x].Son[W ^ <span class="number">1</span>]].F = fa, T[fa].F = x, T[x].Son[W ^ <span class="number">1</span>] = fa, update(fa), update(x) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个地方$splay$双旋判断祖父的时候，不再用$\rm{if(g_fa)}$，而是用$\rm{if(check(fa))}$。原因很简单，我们的虚边也是有指向父亲的指针的，但是连接两个不同的$splay$</p><p>剩下的……大概就没了吧……</p><p>于是——</p><h1 id="color-red-C-color-cyan-o-color-gold-d-color-green-e"><a href="#color-red-C-color-cyan-o-color-gold-d-color-green-e" class="headerlink" title="$\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}$"></a>$\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}$</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300233</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc T[x].Son[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc T[x].Son[1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(a, b, c) for(a = b ; a &lt;= c ; ++ a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> F, Son[<span class="number">2</span>], R, S ;</span><br><span class="line">&#125;T[MAXN] ; <span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; stk ;</span><br><span class="line"><span class="keyword">int</span> base[MAXN], N, M, A, B, C, i ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; T[x].S = T[lc].S ^ T[rc].S ^ base[x] ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; lc ^= rc ^= lc ^= rc, T[x].R ^= <span class="number">1</span> ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> T[T[x].F].Son[<span class="number">0</span>] == x || T[T[x].F].Son[<span class="number">1</span>] == x ;  &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> qwq = <span class="number">0</span> ; x ; x = T[qwq = x].F) splay(x), rc = qwq, update(x) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fa = T[x].F, g_fa = T[fa].F, W = x == T[fa].Son[<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">if</span> (check(fa)) T[g_fa].Son[T[g_fa].Son[<span class="number">1</span>] == fa] = x ; T[x].F = g_fa ;</span><br><span class="line">T[fa].Son[W] = T[x].Son[W ^ <span class="number">1</span>], T[T[x].Son[W ^ <span class="number">1</span>]].F = fa, T[fa].F = x, T[x].Son[W ^ <span class="number">1</span>] = fa, update(fa), update(x) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> qwq = x ; stk.push(qwq) ;</span><br><span class="line"><span class="keyword">while</span>(check(qwq)) qwq = T[qwq].F, stk.push(qwq) ;</span><br><span class="line"><span class="keyword">while</span>(!stk.empty()) push_down(stk.top()), stk.pop() ;</span><br><span class="line"><span class="keyword">while</span>(check(x))&#123;</span><br><span class="line"><span class="keyword">int</span> fa = T[x].F, g_fa = T[fa].F ;</span><br><span class="line"><span class="keyword">if</span> (check(fa)) &#123;</span><br><span class="line">        rotate((T[g_fa].Son[<span class="number">1</span>] == fa) == (T[fa].Son[<span class="number">1</span>] == x) ? fa : x) ; rotate(x) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rooten</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Access(x), splay(x), reverse(x) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; Rooten(x), Access(y), splay(y) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; Rooten(x) ; <span class="keyword">if</span>(Find(y) != x) T[x].F = y ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; Access(x), splay(x) ; <span class="keyword">while</span>(lc) push_down(x), x = lc ; splay(x) ; <span class="keyword">return</span> x ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (!T[x].R) <span class="keyword">return</span> ; T[x].R = <span class="number">0</span> ; <span class="keyword">if</span> (lc) reverse(lc) ; <span class="keyword">if</span> (rc) reverse(rc) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; Rooten(x) ; <span class="keyword">if</span> (Find(y) != x || T[y].Son[<span class="number">0</span>] || T[y].F != x) <span class="keyword">return</span> ; T[y].F = T[x].Son[<span class="number">1</span>] = <span class="number">0</span>, update(x) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M ;</span><br><span class="line">rep(i, <span class="number">1</span>, N) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;base[i]) ;</span><br><span class="line">rep(i, <span class="number">1</span>, M)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;A, &amp;B, &amp;C) ;</span><br><span class="line"><span class="keyword">if</span> (A == <span class="number">0</span>) split(B, C), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T[C].S) ;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A == <span class="number">1</span>) Link(B, C) ; <span class="keyword">else</span> <span class="keyword">if</span> (A == <span class="number">2</span>) Cut(B, C) ; <span class="keyword">else</span> splay(B), base[B] = C ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="rm-0x00-后记和参考"><a href="#rm-0x00-后记和参考" class="headerlink" title="$\rm{0x00}$   后记和参考"></a>$\rm{0x00}$   后记和参考</h1><p>可写完了……嗝……<del>打个肥宅嗝犒劳犒劳自己</del></p><p>怎么说呢，自从我开始学$LCT$到我写完这篇$blog$为止，是我十分难熬的时间，总时长接近一周。一开始看别人写的$LCT$，想当然地、草率地理解了理解，就开始打板子，对$LCT$一直是极为肤浅的认识。直到开始写，才发现自己哪个地方都不会，理解的半生不熟，总之很惨……</p><p>写博客真是一个陶冶情操的过程啊……<del>包括做表情包</del></p><p>加油吧，$pks$！</p><h2 id="rm-Reference"><a href="#rm-Reference" class="headerlink" title="$\rm{Reference}$"></a>$\rm{Reference}$</h2><ul><li>$[1]$ :$Flash_Hu$的$blog$ <a href="http://www.cnblogs.com/flashhu/p/8324551.html" target="_blank" rel="noopener">$^{^{[\nearrow ]}}$</a></li><li>$[2]$ :某篇论文，结合食用效果显著 <a href="https://wenku.baidu.com/view/75906f160b4e767f5acfcedb.html" target="_blank" rel="noopener">$^{^{[\nearrow]}}$</a></li></ul><h2 id="mathfrak-writter-pks"><a href="#mathfrak-writter-pks" class="headerlink" title="$\mathfrak{writter:pks}$"></a>$\mathfrak{writter:pks}$</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://www.orchidany.cf/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LCT-Link Cut Tree" scheme="http://www.orchidany.cf/tags/LCT-Link-Cut-Tree/"/>
    
  </entry>
  
  <entry>
    <title>$Intro$</title>
    <link href="http://www.orchidany.cf/2019/02/04/Intro-1/"/>
    <id>http://www.orchidany.cf/2019/02/04/Intro-1/</id>
    <published>2019-02-04T15:13:49.000Z</published>
    <updated>2019-02-06T13:18:58.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hello, here is <strong>Orchidany</strong>, a high-school student from S.D., China.</p><p>Algorithms, astrophysics, technology, that’s what I love. Perhaps sometimes I‘m fond of painting, music and modern art appreciation. Anyhow, recently my first mission is <strong>Olympiad in Informatics</strong>，shorthanded for <strong>OI</strong>.  And this blog is mainly gonna to record my Learning Steps. </p><p>Although I’m a bit weak in OI by now, but I shall catch the glimmer and keep getting stronger!</p><p>See you soon in my articles !</p><p><em>Somthing Special</em></p><p>Errr…About this ID <em>Orchidany</em>, there is a theory about that:</p><p>My Chinese Id is 皎月半洒花， which is from the poem (Writter is myself) :</p><blockquote><h4 id="鹃住落英满，柳拂溪畔沙。"><a href="#鹃住落英满，柳拂溪畔沙。" class="headerlink" title="鹃住落英满，柳拂溪畔沙。"></a>鹃住落英满，柳拂溪畔沙。</h4><h4 id="南城略炊烟，浣女徐归家。"><a href="#南城略炊烟，浣女徐归家。" class="headerlink" title="南城略炊烟，浣女徐归家。"></a>南城略炊烟，浣女徐归家。</h4><h4 id="故人今安否，欲歌口偏哑。"><a href="#故人今安否，欲歌口偏哑。" class="headerlink" title="故人今安否，欲歌口偏哑。"></a>故人今安否，欲歌口偏哑。</h4><h4 id="笔寒下梅去，皎月半洒花"><a href="#笔寒下梅去，皎月半洒花" class="headerlink" title="笔寒下梅去，皎月半洒花"></a>笔寒下梅去，皎月半洒花</h4></blockquote><p>So……I’ m glad to encounter you!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="笔尖生花" scheme="http://www.orchidany.cf/tags/%E7%AC%94%E5%B0%96%E7%94%9F%E8%8A%B1/"/>
    
  </entry>
  
  <entry>
    <title>网络流$2$·$HLPP$+丧心病狂的优化</title>
    <link href="http://www.orchidany.cf/2019/01/11/HLPP/"/>
    <id>http://www.orchidany.cf/2019/01/11/HLPP/</id>
    <published>2019-01-10T17:06:32.000Z</published>
    <updated>2019-02-14T14:20:51.479Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mathfrak-HLPP"><a href="#mathfrak-HLPP" class="headerlink" title="$\mathfrak{HLPP}$"></a>$\mathfrak{HLPP}$</h1><p>嗯，我也不知道我在月考即将爆炸 + $NOIp$即将爆炸之际，学$HLPP$的目的何在$\rm{TAT}$。</p><blockquote><p>#define $u$的伴点集合     与$u$相隔一条边的且$u$能达到的点的集合 </p></blockquote><h2 id="0x00-Preface"><a href="#0x00-Preface" class="headerlink" title="$0x00~ {}~Preface$"></a>$0x00~ {}~Preface$</h2><blockquote><p><strong>$HLPP(Highest~Label~Preflow~Push)​$最高标签预流推进算法</strong>是处理网络最大流里两种常用方法——<strong>增广路</strong>&amp;<strong>预流推进</strong>中，预流推进算法的一种。据传由$tarjan​$发明<del>怎么又是他</del> ，并被其他科学家证明了其复杂度是<strong>紧却的$O(n^2\sqrt m)​$</strong>。在随机数据中不逊色于普通的增广路算法，而在精心构造的数据中无法被卡，所以是一种可以替代$Dinic​$的方法（随我怎么说，代码又长又难调，所以还是$Dinic​$好啊$\rm{TAT}​$）</p><p>但无论怎样，$wiki$里面已经承认$HLPP$是现在最优秀的网络流算法了。</p></blockquote><p>那么<strong>预流推进</strong>这个大门类里面，思想都差不多。大抵上就是我们对每个点记录<strong>超额流($Extra~Flow$)</strong> ，即<strong>允许流在非源点暂时存储</strong>，并<strong>伺机将超额流推送出去</strong>。不可推送的，就会流回源点。那么最终答案显然存储在$Extra[T]$里面。</p><p>但同时这也有一个问题，就是会出现两个点相互推送不停的情况。为了防止这样，我们采用<strong>最高标号</strong>的策略，给每个点一个高度，对于一个点$u​$以及它的伴点集合${v}​$，当且仅当$h_u = h_v + 1​$ 时才可以推送流。并且我们对于源点$S​$，设置$h_S = N​$，并对于$S​$实行<strong>无限制推送</strong>。那么最后的答案就保存在$Extra[T]​$里面 。</p><p>但有时，我们发现有个点是”谷“，即周围点的高度都比它高，但是它有超额流。那么我们此时考虑<strong>拔高它的高度</strong>，即<strong>重贴标签($relabel​$)</strong>操作。</p><h2 id="0x01-初步的算法流程"><a href="#0x01-初步的算法流程" class="headerlink" title="$0x01$   初步的算法流程"></a>$0x01$   初步的算法流程</h2><p>以下我们用$Extra_u$表示$u$的超额流，$h_u$表示$u$的高度，用$f_k$表示边$k$的容量。</p><ul><li><p>首先把所有的$h_i$都置为零，并把$h_s$置为$N$（点数）。</p></li><li><p>将$S$的流推送到每个与$S$相邻的点，同时把他们加入一个以高度为键值得大根堆，所以每次取出的应该是高度最高的、且超额流不为零的点，并执行推送操作。</p></li><li><p>对于点$u$推送过程中，如果$Extra_u$减到了$0$，就立即退出<strong>（优化一）</strong></p></li><li><p>对于每条出边$k$，推送的流量$F = min(f_k,Extra_u)$并执行两个点（$u,v$）的超额流增减。<strong>如果$v$不在堆里面</strong>，要把$v$放到堆里面。</p></li><li><p>如果推送完毕$Extra[u]$不为零，那么从他的伴点集合选取一个高度最小的点并记录它的高度$h_{min}$，则新的$h_u = h_{min}+1$，并把$u​$入堆。</p></li></ul><p>好的，然后就可以撒花了……可是等等，他怎么这么慢$qaq$</p><p>接下来我们发现，重贴标签的过程似乎与$ISAP$有点点像……所以我们不妨通过一个$Gap$数组来记录”断层情况“：即如果对于一个点$u$来说，他的伴点集${v}$已经不存在$h_u = h_v + 1$的点了，并且也不存在一个点$j$使得$h_j = h_u$那么这个地方就是一个<strong>断层$(Gap)$</strong> ，那么也就是说，对于所有$h_i&gt; h_u$的点来说，它们把流推送到$h_u$的高度就不能继续推送了，所以我们直接$h_i = N + 1$，让他们回流到源点。<strong>（优化二）</strong></p><p>接下来这个优化，亲测可以<strong>提速$4000ms​$</strong>，平均每个测试点提速$700​$ ~ $800ms​$，去掉数据最小的点，每个点平均提速$1000ms​$。这就是——$BFS​$!</p><p>我们不妨一开始就倒着$BFS$一遍，搜出每个点离汇点的最短距离作为初始高度而不是把零作为初始高度（源点高度还是$N$。嗯，$Mr_Spade$大佬实在太强了$qwq$</p><p>对了，代码实现方面，需要好多判断不是源点和汇点的小细节……无路赛无路赛无路赛$&gt;_&lt;$！</p><h3 id="color-red-C-color-cyan-o-color-gold-d-color-green-e-·1"><a href="#color-red-C-color-cyan-o-color-gold-d-color-green-e-·1" class="headerlink" title="$\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}·1$"></a>$\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}·1$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//省略某些部分</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf, MAXN, MAXM, to(k)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num, h ;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> state &amp; now) </span><br><span class="line">    <span class="keyword">const</span>&#123;  <span class="keyword">return</span> h &lt; now.h ; &#125;</span><br><span class="line">&#125; ; priority_queue &lt;state&gt; heap ; </span><br><span class="line">BFS init ;</span><br><span class="line"><span class="keyword">int</span> N, M, S, T, cnt = <span class="number">-1</span>, A, B, C, D, t, min_h ;</span><br><span class="line"><span class="keyword">int</span> head[MAXN], Extra[MAXN], H[MAXN], Gap[MAXN], node ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Preflow_Push</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, k ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; ++ i) </span><br><span class="line">        <span class="keyword">if</span>(H[i] &lt; Inf) ++ Gap[H[i]] ;</span><br><span class="line">    <span class="keyword">for</span>(k = head[S]; k != <span class="number">-1</span> ; k = E[k].next)</span><br><span class="line">        <span class="keyword">if</span>((t = E[k].f))&#123;</span><br><span class="line">            E[k].f -= t, E[k ^ <span class="number">1</span>].f += t, Extra[S] -= t, Extra[to(k)] += t ;</span><br><span class="line">            <span class="keyword">if</span>(to(k) != T &amp;&amp; !vis[to(k)])</span><br><span class="line">                heap.push((state)&#123;to(k), H[to(k)]&#125;), vis[to(k)] = <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(!heap.empty())&#123;</span><br><span class="line">        vis[node = heap.top().num] = <span class="number">0</span>, min_h = Inf, heap.pop() ;</span><br><span class="line">        <span class="keyword">for</span>(k = head[node] ; k != <span class="number">-1</span> ; k = E[k].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(E[k].f &amp;&amp; H[node] == H[to(k)] + <span class="number">1</span>)&#123;</span><br><span class="line">                t = min(Extra[node], E[k].f) ;</span><br><span class="line">                E[k].f -= t, E[k ^ <span class="number">1</span>].f += t, Extra[node] -= t, Extra[to(k)] += t ;</span><br><span class="line">                <span class="keyword">if</span>(!vis[to(k)] &amp;&amp; to(k) != S &amp;&amp; to(k) != T)</span><br><span class="line">                    heap.push((state)&#123;to(k), H[to(k)]&#125;), vis[to(k)] = <span class="number">1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (E[k].f) min_h = min(min_h, H[to(k)]) ;</span><br><span class="line">            <span class="keyword">if</span> (!Extra[node]) <span class="keyword">break</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Extra[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!--Gap[H[node]])    </span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N ; ++ i)</span><br><span class="line">                    <span class="keyword">if</span>(i != S &amp;&amp; i != T &amp;&amp; H[i] &gt; H[node] &amp;&amp; H[i] &lt; N + <span class="number">1</span>) H[i] = N + <span class="number">1</span> ;</span><br><span class="line">            H[node] = Inf; H[node] = min_h + <span class="number">1</span> ; </span><br><span class="line">            heap.push((state)&#123;node, H[node]&#125;), vis[node] = <span class="number">1</span>, ++ Gap[H[node]] ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;fast;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Input() ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; ++ i) </span><br><span class="line">        head[i] = <span class="number">-1</span>, H[i] = Inf ;</span><br><span class="line">    <span class="keyword">while</span>(M --)&#123;Add; &#125;</span><br><span class="line">    q.push(T), H[T] = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.front() ; q.pop() ;</span><br><span class="line">        <span class="keyword">for</span>(k = head[now] ; k != <span class="number">-1</span> ; k = E[k].next)</span><br><span class="line">            <span class="keyword">if</span> (H[to(k)] &gt; H[now] + <span class="number">1</span>)</span><br><span class="line">                H[E[k].to] = H[now] + <span class="number">1</span>, q.push(E[k].to) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (H[S] == <span class="number">0</span>) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span> ; <span class="keyword">return</span> <span class="number">0</span> ;&#125; </span><br><span class="line">    H[S] = N, Preflow_Push() ; <span class="built_in">cout</span> &lt;&lt; Extra[T] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来我们加上下面这一句话的毒瘤卡常就可以有$4000ms$左右的好成绩，但事实上，这个速度依旧慢的要死。</p><p><strong>注意！这个写法是经典写法，其时间复杂度是紧却的$\boldsymbol{\rm{\Theta(n^2mlogn)}}$的，也就是说在$\boldsymbol{n=1200}$时会带一个$\boldsymbol{10}$倍的常数</strong></p><p>怎么优化呢——</p><h2 id="boldsymbol-0x02-Optimization"><a href="#boldsymbol-0x02-Optimization" class="headerlink" title="$\boldsymbol{0x02~~Optimization}$"></a>$\boldsymbol{0x02~~Optimization}$</h2><p>各位，你们将会见到迄今为止OI界最丧心病狂的优化（之一）……</p><p>来，我们首先思考思考普通的HLPP到底会慢在哪里：</p><ul><li><p>$STL$支持的$heap$（比如优先队列）实在是太太太…太慢了！</p></li><li><p>每次$Gap$优化，我们的时间复杂度是<strong>紧确</strong>的$\Theta(n)$。的这显然不合算，因为假设我当前的$\boldsymbol{gap}$（断层）正好位于倒数第一高的点和倒数第二高的点，那么也就相当于我单次会<strong>浪费$\boldsymbol{\Theta(n)}$的时间</strong>。</p></li></ul><p>事实上…普通的$HLPP$代码并不长，主要问题就是这两个。</p><p>我们考虑，如果不用堆的话怎么做呢？</p><p>呃…不用堆的意思并不是我们不从高度最大的点开始推送。这个地方需要一个$idea$——在$HLPP$中，<strong>高度函数$\boldsymbol{H(x)}$和点数集大小$\boldsymbol{N(x)}$是广义同阶的。</strong> 换句话说，我们可以考虑从高度入手。</p><p>换句话说，我们原来是通过节点编号访问节点以及其高度，现在我们如果从高度入手，再去访问节点，我们就可以做到$\boldsymbol{O(n)}$而不是$\boldsymbol{\rm{O(nlogn)}}$ 。 那么由于同一高度的节点或许有很多，直接开一个$vector$。在这个地方我们用$vector$而不用二维数组建立二维关系的原因，主要是我们初始化麻烦得很，如果套用$memset$或者$fill$的话，常数之大可想而知。</p><p>那么这两个问题就顺理成章地解决了。但这个地方还有一个优化，就是虽然$vector$和$list$都是线性容器，但是$list$的本质是双向链表，频繁处理插入删除操作时会具有更优秀的表现。</p><p>也就是说，原来的$Gap$数组我们可以直接用$list$做，以图更小的常数。那么这时存在一个问题，就是虽然本质上删除是容易的，但是你怎么知道要删同一高度下的哪个元素(=@__@=)？就算你知道，$list$也不知道啊2333</p><p>hhh不皮了，其实我们记录一下位置就好，即记录一下每个节点在$list$中的位置，单独开一个$Iterator$类型的$vector$记录即可。</p><p>好了，现在我们获得了$10$倍$+$的常数优势qwq，撒花花…</p><p>哦对，还有几点我debug的时候被坑死的点：</p><ul><li>那个$Iterator$类型的$vector$对象是点的编号不是高度！</li><li>注意你的下标！下标！再说一遍，下标！因为STL自带左闭右开的性质<del>wrnm</del>，所以一定要注意，如果你是$[1,n]$选手，注意你的$assign$函数！</li></ul><h3 id="color-red-C-color-cyan-o-color-gold-d-color-green-e-·2-我觉得写的很难看但是有注释qaq-："><a href="#color-red-C-color-cyan-o-color-gold-d-color-green-e-·2-我觉得写的很难看但是有注释qaq-：" class="headerlink" title="$\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}·2$  (我觉得写的很难看但是有注释qaq)："></a>$\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}·2$  (我觉得写的很难看但是有注释qaq)：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//writter:Orchidany(pks)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"avx"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)<span class="comment">//sb毒瘤优化</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10030</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min my_min</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BG begin()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc getchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rr register </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Iter iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, x) for(i = a ; i &lt;= x ; ++ i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; List ; <span class="keyword">int</span> step;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, f, next ;</span><br><span class="line">    Edge(<span class="keyword">int</span> to,<span class="keyword">int</span> f,<span class="keyword">int</span> next):to(to),f(f),next(next)&#123;&#125;<span class="comment">//没有人发现正下方这句注释前半句和后半句都是三个音节的吗qaq</span></span><br><span class="line">&#125; ; <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; q, H, Extra, Set[MAXN], cnt ; List Gap[MAXN] ;<span class="comment">//list，就是快（</span></span><br><span class="line"><span class="comment">//q:队列，H:高度，Extra：每个点的超额流，Set:…就是那个经典版HLPP里的堆，高度做第一维</span></span><br><span class="line"><span class="keyword">int</span> Ans, N, M, S, T, max_H, now_H ; <span class="built_in">vector</span> &lt;Edge&gt; E[MAXN] ; <span class="comment">/*vector存边（据说会快）*/</span><span class="built_in">vector</span>&lt;List::iterator&gt; Era_pos ; <span class="comment">//辅助定位+删除</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">eggs</span><span class="params">()</span> </span>&#123; ;&#125;<span class="comment">//for free~</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">my_min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &amp; ((a - b) &gt;&gt; <span class="number">31</span>) | b &amp; ( ~ (a - b) &gt;&gt; <span class="number">31</span>) ;&#125;<span class="comment">//黑科技</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> v, <span class="keyword">int</span> u)</span></span>&#123; E[u].push_back(Edge(v, f, E[v].size())), E[v].push_back(Edge(u, <span class="number">0</span>, E[u].size() - <span class="number">1</span>)) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qr</span><span class="params">()</span></span>&#123; rr <span class="keyword">int</span> k = <span class="number">0</span> ; <span class="keyword">char</span> c = gc() ; <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) c = gc() ;<span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) k = (k &lt;&lt; <span class="number">1</span>) + (k &lt;&lt; <span class="number">3</span>) + c - <span class="number">48</span>, c = gc() ; <span class="keyword">return</span> k ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init_label</span><span class="params">()</span></span>&#123;<span class="comment">//等价于一开始的那个BFS，只执行一次</span></span><br><span class="line">    rr <span class="keyword">int</span> i, h = <span class="number">0</span>, t = <span class="number">0</span> ;q.clear(), q.resize(N) ; </span><br><span class="line">    H.assign(N + <span class="number">1</span>, N + <span class="number">1</span>) ; H[T] = <span class="number">0</span> ; q[t ++] = T ;<span class="comment">//从T（高度小的）向前标号</span></span><br><span class="line">    <span class="keyword">while</span> (h &lt; t)&#123;<span class="comment">//队列……BFS……真熟悉啊……嗝……</span></span><br><span class="line">        rr <span class="keyword">int</span> now = q[h] ; ++ h ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span> &lt;Edge&gt; :: Iter k = E[now].begin() ; k != E[now].end() ; ++ k)</span><br><span class="line">            <span class="keyword">if</span> (H[k-&gt;to] == N + <span class="number">1</span> &amp;&amp; E[k-&gt;to][k-&gt;next].f) H[k-&gt;to] = H[now] + <span class="number">1</span>, ++ cnt[H[k-&gt;to]], q[t ++] = k-&gt;to ;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">0</span>, N + <span class="number">1</span>) Set[i].clear(), Gap[i].clear() ;<span class="comment">//还是清空一下比较好吧</span></span><br><span class="line">    rep(i, <span class="number">0</span>, N) </span><br><span class="line">        <span class="keyword">if</span> (H[i]  &lt;N + <span class="number">1</span>)  </span><br><span class="line">            Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i), <span class="comment">//疑似insert函数的返回值是一个指针qaq</span></span><br><span class="line">            (Extra[i]&gt;<span class="number">0</span>) ? Set[H[i]].push_back(i) : eggs() ;<span class="comment">//这个彩蛋（eggs）是因为，三目运算符":"两边类型需要形同…</span></span><br><span class="line">    max_H = now_H = H[q[-- t]] ; <span class="comment">//更新，BFS的性质，最后一个元素一定高度最大（除了源点）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> x, Edge &amp;e)</span></span>&#123;<span class="comment">//单独写出来的push函数，好像很方便？</span></span><br><span class="line">    rr <span class="keyword">int</span> now_flow = min(Extra[x], e.f) ;</span><br><span class="line">    Extra[x] -= now_flow, e.f -= now_flow, Extra[e.to] += now_flow, E[e.to][e.next].f += now_flow ;</span><br><span class="line">    <span class="keyword">if</span> (Extra[e.to] &gt; <span class="number">0</span> &amp;&amp; Extra[e.to] &lt;= now_flow) Set[H[e.to]].push_back(e.to) ;  <span class="comment">// push it into "heap"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Push(<span class="keyword">int</span> x)&#123;</span><br><span class="line">    rr <span class="keyword">int</span> i, x_h = N, t = H[x] ; </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span> &lt;Edge&gt; :: Iter k = E[x].BG ; k != E[x].end() ; ++ k)</span><br><span class="line">        <span class="keyword">if</span> (k-&gt;f &gt; <span class="number">0</span>)<span class="comment">//如果可以流</span></span><br><span class="line">            <span class="keyword">if</span> (H[k-&gt;to] == H[x] - <span class="number">1</span>) &#123; Push(x, *k) ; <span class="keyword">if</span> (!Extra[x]) <span class="keyword">return</span> ;&#125; <span class="keyword">else</span> x_h = min(x_h, H[k-&gt;to] + <span class="number">1</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (cnt[H[x]] &lt;= <span class="number">1</span>)&#123;<span class="comment">//如果出现断层了</span></span><br><span class="line">        <span class="keyword">for</span>(i = t ; i &lt;= max_H ; Gap[i].clear(), ++ i)<span class="comment">//这个gap的for肯定比O(n)优秀</span></span><br><span class="line">            <span class="keyword">for</span>(List::Iter k = Gap[i].BG ; k != Gap[i].end() ; ++ k) cnt[H[*k]] --, H[*k] = N ; </span><br><span class="line">        max_H = t - <span class="number">1</span> ; <span class="comment">/*断层以上的高度都没用了*/</span><span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    -- cnt[t], Era_pos[x] = Gap[t].erase(Era_pos[x]) ; H[x] = x_h ; <span class="keyword">if</span> (x_h == N) <span class="keyword">return</span> ; <span class="comment">//重贴标签操作，为当前点删除原来的高度</span></span><br><span class="line">    ++ cnt[x_h], Era_pos[x] = Gap[x_h].insert(Gap[x_h].begin(), x), max_H = max(now_H = x_h, max_H), Set[x_h].push_back(x) ;<span class="comment">//增添新的高度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">HLPP</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rr <span class="keyword">int</span> i, now ; H.assign(N, <span class="number">0</span>) ; H[S] = N ; Era_pos.resize(N)  ;</span><br><span class="line">    rep(i, <span class="number">0</span>, N - <span class="number">1</span>) <span class="keyword">if</span> (i != S) Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i) ; </span><br><span class="line">    cnt.assign(N, <span class="number">0</span>), cnt[<span class="number">0</span>] = N - <span class="number">1</span> ; Extra.assign(N, <span class="number">0</span>), Extra[S] = INF, Extra[T] =- INF ;</span><br><span class="line">    rep(i, <span class="number">0</span>, E[S].size() - <span class="number">1</span>) Push(S, E[S][i]) ;  <span class="comment">//下面源点要单独拿出来推送，因为源点推送时高度差不需要=1.</span></span><br><span class="line">    Init_label() ; <span class="comment">//初始化（BFS）</span></span><br><span class="line">    <span class="keyword">while</span> (now_H &gt;= <span class="number">0</span>) <span class="comment">//正式开始HLPP（泪目）</span></span><br><span class="line">        <span class="keyword">if</span> (Set[now_H].empty()) now_H -- ; <span class="comment">//高度递减，实现一个堆的效果</span></span><br><span class="line">        <span class="keyword">else</span> now = Set[now_H].back(), Set[now_H].pop_back(), _Push(now) ;</span><br><span class="line">    <span class="keyword">return</span> Extra[T] + INF ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    N = qr(),; rr <span class="keyword">int</span> i ;<span class="comment">//下面的++N是为了日后好操作qaq</span></span><br><span class="line">    rep(i, <span class="number">1</span>, M) Add(qr(), qr(), qr()) ; ++ N, Ans = HLPP() ; <span class="built_in">cout</span> &lt;&lt; Ans &lt;&lt; <span class="built_in">endl</span> ; <span class="keyword">return</span> <span class="number">0</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是个$fread$卡常版本$qaq$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"avx"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1202</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min my_min</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BG begin()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rr register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap my_swap </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Iter iterator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, x) for(i = a ; i &lt;= x ; ++ i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; List ; <span class="keyword">int</span> step;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ch_top=<span class="number">4e7</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span> ch[ch_top],*now_r=ch<span class="number">-1</span>,*now_w=ch<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*++now_r&lt;<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=*now_r-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>(*++now_r&gt;=<span class="string">'0'</span>)x=x*<span class="number">10</span>+*now_r-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> st[<span class="number">20</span>];<span class="keyword">static</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">while</span>(st[++top]=<span class="string">'0'</span>+x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(*++now_w=st[top],--top);</span><br><span class="line">    *++now_w=<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, f, next ;</span><br><span class="line">    Edge(<span class="keyword">int</span> to,<span class="keyword">int</span> f,<span class="keyword">int</span> next):to(to),f(f),next(next)&#123;&#125;</span><br><span class="line">&#125; ; <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; q, H, Extra, Set[MAXN], cnt ; List Gap[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> Ans, N, M, S, T, max_H, now_H ; <span class="built_in">vector</span> &lt;Edge&gt; E[MAXN] ; <span class="built_in">vector</span>&lt;List::iterator&gt; Era_pos ; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">eggs</span><span class="params">()</span> </span>&#123; ;&#125;<span class="comment">//for free~</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">my_min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a &amp; ((a - b) &gt;&gt; <span class="number">31</span>) | b &amp; ( ~ (a - b) &gt;&gt; <span class="number">31</span>) ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> v, <span class="keyword">int</span> u)</span></span>&#123; E[u].push_back(Edge(v, f, E[v].size())), E[v].push_back(Edge(u, <span class="number">0</span>, E[u].size() - <span class="number">1</span>)) ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init_label</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rr <span class="keyword">int</span> i, h = <span class="number">0</span>, t = <span class="number">0</span> ;q.clear(), q.resize(N) ; </span><br><span class="line">    rr <span class="keyword">int</span> qaq = N + <span class="number">1</span> ; H.assign(qaq, qaq) ; H[T] = <span class="number">0</span> ; q[t ++] = T ;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; t)&#123;</span><br><span class="line">        rr <span class="keyword">int</span> now = q[h], qwq = H[now] + <span class="number">1</span> ; ++ h ; </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span> &lt;Edge&gt; :: Iter k = E[now].begin() ; k != E[now].end() ; ++ k)</span><br><span class="line">            <span class="keyword">if</span> (H[k-&gt;to] == qaq &amp;&amp; E[k-&gt;to][k-&gt;next].f) H[k-&gt;to] = qwq, ++ cnt[H[k-&gt;to]], q[t ++] = k-&gt;to ;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">0</span>, N - <span class="number">1</span>) Set[i].clear(), Gap[i].clear() ;</span><br><span class="line">    rep(i, <span class="number">0</span>, N - <span class="number">1</span>) <span class="keyword">if</span> (H[i] &lt; N)  Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i), (Extra[i] &gt; <span class="number">0</span>) ? Set[H[i]].push_back(i) : eggs() ;</span><br><span class="line">    max_H = now_H = H[q[-- t]] ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> x, Edge &amp;e)</span></span>&#123;</span><br><span class="line">    rr <span class="keyword">int</span> now_flow = min(Extra[x], e.f) ;</span><br><span class="line">    Extra[x] -= now_flow, e.f -= now_flow, Extra[e.to] += now_flow, E[e.to][e.next].f += now_flow ;</span><br><span class="line">    <span class="keyword">if</span> (Extra[e.to] &gt; <span class="number">0</span> &amp;&amp; Extra[e.to] &lt;= now_flow) Set[H[e.to]].push_back(e.to) ;  <span class="comment">// push it into heap</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _Push(<span class="keyword">int</span> x)&#123;</span><br><span class="line">    rr <span class="keyword">int</span> i, x_h = N, t = H[x] ; </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span> &lt;Edge&gt; :: Iter k = E[x].BG ; k != E[x].end() ; ++ k)</span><br><span class="line">        <span class="keyword">if</span> (k-&gt;f &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (H[k-&gt;to] == H[x] - <span class="number">1</span>) &#123; Push(x, *k) ; <span class="keyword">if</span> (!Extra[x]) <span class="keyword">return</span> ;&#125; <span class="keyword">else</span> x_h = min(x_h, H[k-&gt;to] + <span class="number">1</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (cnt[H[x]] &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i = t ; i &lt;= max_H ; Gap[i].clear(), ++ i)</span><br><span class="line">            <span class="keyword">for</span>(List::Iter k = Gap[i].BG ; k != Gap[i].end() ; ++ k) cnt[H[*k]] --, H[*k] = N ; max_H = t - <span class="number">1</span> ; <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    -- cnt[t], Era_pos[x] = Gap[t].erase(Era_pos[x]) ; H[x] = x_h ; <span class="keyword">if</span> (x_h == N) <span class="keyword">return</span> ; </span><br><span class="line">    ++ cnt[x_h], Era_pos[x] = Gap[x_h].insert(Gap[x_h].begin(), x), max_H = max(now_H = x_h, max_H), Set[x_h].push_back(x) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HLPP</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rr <span class="keyword">int</span> i, now ; H.assign(N, <span class="number">0</span>) ; H[S] = N ; cnt.assign(N, <span class="number">0</span>) ; Era_pos.resize(N) ;</span><br><span class="line">    rep(i, <span class="number">0</span>, N - <span class="number">1</span>) <span class="keyword">if</span> (i != S) Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i) ; cnt[<span class="number">0</span>] = N - <span class="number">1</span> ;</span><br><span class="line">    Extra.assign(N, <span class="number">0</span>), Extra[S] = INF, Extra[T] = -INF ; rep(i, <span class="number">0</span>, E[S].size() - <span class="number">1</span>) Push(S, E[S][i]) ;  Init_label() ; </span><br><span class="line">    <span class="keyword">while</span> (now_H &gt;= <span class="number">0</span>) <span class="keyword">if</span> (Set[now_H].empty()) now_H -- ; <span class="keyword">else</span> now = Set[now_H].back(), Set[now_H].pop_back(), _Push(now) ;<span class="keyword">return</span> Extra[T] + INF ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fread(ch,<span class="number">1</span>,ch_top,<span class="built_in">stdin</span>); N = read(), M = read(), S = read(), T = read() ; rr <span class="keyword">int</span> i ;</span><br><span class="line">    rep(i, <span class="number">1</span>, M) Add(read(), read(), read()) ; ++ N, Ans = HLPP() ; write(Ans) ; fwrite(ch,<span class="number">1</span>,now_w-ch,<span class="built_in">stdout</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="撒fa"><a href="#撒fa" class="headerlink" title="撒fa~"></a>撒fa~</h4><h2 id="0x03-后记"><a href="#0x03-后记" class="headerlink" title="$0x03~~$后记"></a>$0x03~~$后记</h2><ul><li>这道题的经典版本好几个月之前我写了一天……然后今天又翻出来，发现了巨佬<code>KevinYu</code>抛了一个玉，我就打算优化一波……毒瘤啊，什么$vector$存边、$list$我都是第一次用呜呜……</li><li>不得不说…某些大佬的码风真是不可看啊…都写题解了怎么还这么…这么…（虽然自己的也不咋地qaq） </li><li>最后，人艰不拆，人艰不拆…</li></ul><h2 id="boldsymbol-mathfrak-writter-Orchidany-pks"><a href="#boldsymbol-mathfrak-writter-Orchidany-pks" class="headerlink" title="$\boldsymbol{\mathfrak{writter:Orchidany(pks)}}$"></a>$\boldsymbol{\mathfrak{writter:Orchidany(pks)}}$</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://www.orchidany.cf/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="网络流-最大流" scheme="http://www.orchidany.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="目测用不到的算法之HLPP" scheme="http://www.orchidany.cf/tags/%E7%9B%AE%E6%B5%8B%E7%94%A8%E4%B8%8D%E5%88%B0%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8BHLPP/"/>
    
  </entry>
  
  <entry>
    <title>随想四·故人</title>
    <link href="http://www.orchidany.cf/2019/01/01/%E9%9A%8F%E6%83%B3%E5%9B%9B%C2%B7%E6%95%85%E4%BA%BA/"/>
    <id>http://www.orchidany.cf/2019/01/01/随想四·故人/</id>
    <published>2018-12-31T16:00:01.000Z</published>
    <updated>2019-02-14T14:55:10.485Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“随想”系列索引：<a href="http://www.orchidany.cf/2050/12/31/%E9%9A%8F%E6%83%B3%C2%B7%E7%9B%AE%E6%AC%A1%E8%A1%A8/">戳我</a></p><hr><p>这篇先鸽着233</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="随想/下下笔" scheme="http://www.orchidany.cf/tags/%E9%9A%8F%E6%83%B3-%E4%B8%8B%E4%B8%8B%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>网络流1·$Dinic\&amp;$费用流</title>
    <link href="http://www.orchidany.cf/2018/08/20/net-work-flow%E5%88%9D%E6%AD%A5/"/>
    <id>http://www.orchidany.cf/2018/08/20/net-work-flow初步/</id>
    <published>2018-08-19T17:06:47.000Z</published>
    <updated>2019-02-14T14:17:44.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网络流1·-Dinic-amp-费用流"><a href="#网络流1·-Dinic-amp-费用流" class="headerlink" title="网络流1·$Dinic\&amp;$费用流"></a>网络流1·$Dinic\&amp;$费用流</h1><h2 id="0x00-Preface"><a href="#0x00-Preface" class="headerlink" title="$0x00~ {}~Preface$"></a>$0x00~ {}~Preface$</h2><p>$2333$这是好久之前学的了，不过一直在咕咕咕咕。</p><p>一般来讲，正常的网络流笔记一开始都是要给网络流图下定义的。那么我们不妨也来先进行一波这种操作。</p><p>那么网络流图，类似于有向图，边上带权，但是这个权值变成了“容量”。那么，我们定义容量为$c(u,v) \in E ? c(u,v) : 0​$。在整张图中有一个源点和一个汇点，且对于每个点来说有$$\sum F_{in} = \sum F_{out}​$$并且我们人为的将$S​$的$F_{in}​$设置为$0​$，$F_{out}​$设置为$+\infty​$。$T​$正好相反。当然，如果非说不合适的话，可以将源点和汇点看做同一个点233.</p><p>通过线性规划我们可以证明的是<strong>最大流等价于最小割</strong>，而博主现在对线性规划还只是一知半解，等什么时候“贯通了”再整理博客吧233</p><p>好的，窝觉得定义什么的可以不说了，我们直接上$EK$</p><h2 id="0x01-不知道可以用来干啥的-EK"><a href="#0x01-不知道可以用来干啥的-EK" class="headerlink" title="$0x01~$ 不知道可以用来干啥的$EK$"></a>$0x01~$ 不知道可以用来干啥的$EK$</h2><p>其实，$EK$身为大家眼中的$basis$算法，他居然是比$Dinic$晚发表的……$233$</p><p>全程是$Edmond-Karp$ ,由两位科学家一起发表的，复杂度上界大约在$\Theta(nm^2)$左右，<del>是个比较没用的算法</del></p><p>他的原理就是，我们通过两个杀器来实现最大流：</p><p>$Killer1:$增广路</p><p>这个东西就是我们不断寻找从源点到汇点的可行路径，不断流直到不能流为止，也没有什么技巧可言，毕竟网络流是线性规划而不是动态规划，图集与解是单射的逻辑关系而不是一对多的非映射关系。</p><p>$Killer2:$ 反向边</p><p>虽然图集与解是单射的逻辑关系，即虽然对于同一张图$G(U, V)$无论怎么走，最优解（最大流）总是一个定值，但是我们在执行算法的时候可能会因为选择了错误的增广路经而导致算法的错误。所以此时我们考虑建立反向边。其实这就是一个小小的反悔操作。这个正确性在于我们建立了反向边，对于执行反悔操作并没有什么问题，对于执行正常的增广操作也不会影响什么结果，因为毕竟是反向边——是从$T$连向$S$的，等同于原来没反向边时的情况。</p><p>嗯，那么我们程序实现的时候，大概就是这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q ;</span><br><span class="line">    fill(_F, _F + N + <span class="number">1</span>, Inf) ;</span><br><span class="line">    fill(dis, dis + N + <span class="number">1</span>, <span class="number">0</span>) ;</span><br><span class="line">    q.push(S), dis[S] = <span class="number">1</span>, pre[T] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">        now = q.front() ; q.pop() ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = head[now]; k != <span class="number">-1</span> ; k = e[k].next)&#123;</span><br><span class="line">                <span class="keyword">if</span>(e[k].v &amp;&amp; !dis[e[k].to])&#123;</span><br><span class="line">                    dis[e[k].to] = dis[now] + <span class="number">1</span> ;</span><br><span class="line">                    _F[e[k].to] = min(e[k].v, _F[now]) ;</span><br><span class="line">                    pre[e[k].to] = now, Last[e[k].to] = k ;</span><br><span class="line">                    q.push(e[k].to) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[T] != <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _EK()&#123;</span><br><span class="line">    <span class="keyword">while</span>(BFS())&#123;</span><br><span class="line">        now = T, MAX_F += _F[T] ;</span><br><span class="line">        <span class="keyword">while</span>(now != S)</span><br><span class="line">            e[Last[now]].v -= _F[T], e[Last[now] ^ <span class="number">1</span>].v += _F[T], now = pre[now] ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中$Last$记录前驱，$dis$就是个$mark$，$_F$数组记录增广路上最大的流量 。</p><p>那我们接下来分析复杂度。值得注意的是，$EK$由于采用$BFS$，所以每次找的一定是最短路。而在最短路不变的一段时间内一条边和它的反向边不可能都被增广（如果增广反向边的话，$dis_{min}++$），所以在每条边都作为残量最小值增广一次之后（至多$m$次）最短路就会增加。而最短路最多从$2$增到$n$，所以最多增广$n \times m$次。而每次$bfs$至多是$\Theta(m)$的，所以总复杂度上界是$\Theta(nm^2)$</p><p>但事实上，随机的数据大多数情况下是要远远小于这个复杂度上界的，所以$EK$可以解决朴素的最大流问题。</p><p>全部的代码存档：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 1926081700</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">int</span> N, M, S, T ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, v ;</span><br><span class="line">&#125;e[MAX &lt;&lt; <span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">int</span> MAX_F, i ;</span><br><span class="line"><span class="keyword">int</span> head[MAX], cnt = <span class="number">-1</span>, pre[MAX], now ;</span><br><span class="line"><span class="keyword">int</span> A, B, C, Last[MAX], _F[MAX], dis[MAX] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span> ; <span class="keyword">char</span> c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt;= <span class="string">'9'</span> &amp;&amp; c &gt;= <span class="string">'0'</span>) k = (k &lt;&lt; <span class="number">1</span>) + (k &lt;&lt; <span class="number">3</span>) + c - <span class="number">48</span>, c = getchar() ;</span><br><span class="line">    <span class="keyword">return</span> k ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++ cnt].to = v, e[cnt].v = w ;</span><br><span class="line">    e[cnt].next = head[u], head[u] = cnt ;</span><br><span class="line">    e[++ cnt].to = u, e[cnt].v = <span class="number">0</span> ;</span><br><span class="line">    e[cnt].next = head[v],  head[v] = cnt ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q ;</span><br><span class="line">    fill(_F, _F + N + <span class="number">1</span>, Inf) ;</span><br><span class="line">    fill(dis, dis + N + <span class="number">1</span>, <span class="number">0</span>) ;</span><br><span class="line">    q.push(S), dis[S] = <span class="number">1</span>, pre[T] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">        now = q.front() ; q.pop() ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = head[now]; k != <span class="number">-1</span> ; k = e[k].next)&#123;</span><br><span class="line">                <span class="keyword">if</span>(e[k].v &amp;&amp; !dis[e[k].to])&#123;</span><br><span class="line">                    dis[e[k].to] = dis[now] + <span class="number">1</span> ;</span><br><span class="line">                    _F[e[k].to] = min(e[k].v, _F[now]) ;</span><br><span class="line">                    pre[e[k].to] = now, Last[e[k].to] = k ;</span><br><span class="line">                    q.push(e[k].to) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[T] != <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _EK()&#123;</span><br><span class="line">    <span class="keyword">while</span>(BFS())&#123;</span><br><span class="line">        now = T, MAX_F += _F[T] ;</span><br><span class="line">        <span class="keyword">while</span>(now != S)</span><br><span class="line">            e[Last[now]].v -= _F[T], e[Last[now] ^ <span class="number">1</span>].v += _F[T], now = pre[now] ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; S &gt;&gt; T ;</span><br><span class="line">    fill (head + <span class="number">1</span>, head + N + <span class="number">1</span>, <span class="number">-1</span>) ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= M; ++ i)</span><br><span class="line">        A = qr(), B = qr(), C = qr(), add(A, B, C) ;</span><br><span class="line">    _EK() ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MAX_F &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-据说可以拯救世界的-Dinic"><a href="#0x02-据说可以拯救世界的-Dinic" class="headerlink" title="$0x02$  据说可以拯救世界的$Dinic$"></a>$0x02$  据说可以拯救世界的$Dinic$</h2><p>那么接下来我们说$Dinic$，这个算法是由$Dinic$教授创造的$qwq$</p><p>然后$Dinic$在$EK$的基础上，采用了两个新的优化方案：</p><p>$Case1:$分层图</p><p>每次我们选择用$bfs + dfs$去增广一张“增广网”，大体上就是我们记录深度（或者说是离源点的最小距离），然后我们用$dfs$遍历这张增广网。</p><p>$Case2:$当前弧</p><p>我们依仗的是这一段（句）代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[now];i!=<span class="number">-1</span>;i=line[i].nxt)</span><br></pre></td></tr></table></figure><p>其中比较重要的是引用符号，此处引用的目的是不断更新$cur$，达到不重复枚举的目的。</p><p>那么整体代码就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">int</span> N, M, S, T ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, v ; </span><br><span class="line">&#125;e[MAX &lt;&lt; <span class="number">1</span>] ; <span class="keyword">int</span> A, B, C, i ;</span><br><span class="line"><span class="keyword">int</span> head[MAX], cnt = <span class="number">-1</span>, now, cur[MAX], dis[MAX] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span> ; <span class="keyword">char</span> c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt;= <span class="string">'9'</span> &amp;&amp; c &gt;= <span class="string">'0'</span>) k = (k &lt;&lt; <span class="number">1</span>) + (k &lt;&lt; <span class="number">3</span>) + c - <span class="number">48</span>, c = getchar() ;</span><br><span class="line">    <span class="keyword">return</span> k ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++ cnt].to = v, e[cnt].v = w ;</span><br><span class="line">    e[cnt].next = head[u], head[u] = cnt ;</span><br><span class="line">    e[++ cnt].to = u, e[cnt].v = <span class="number">0</span> ;</span><br><span class="line">    e[cnt].next = head[v], head[v] = cnt ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q ;</span><br><span class="line">    fill(dis, dis + N + <span class="number">23</span>, <span class="number">0</span>) ;</span><br><span class="line">    q.push(S), dis[S] = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">        now = q.front() ; q.pop() ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = head[now]; k != <span class="number">-1</span> ; k = e[k].next)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!dis[e[k].to] &amp;&amp; e[k].v)</span><br><span class="line">                dis[e[k].to] = dis[now] + <span class="number">1</span>, q.push(e[k].to) ; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[T] ? <span class="number">1</span> : <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> St, <span class="keyword">int</span> Aim, <span class="keyword">int</span> Flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (St == Aim || !Flow) <span class="keyword">return</span> Flow ; <span class="keyword">int</span> Fl, res = <span class="number">0</span> ; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> &amp;k = cur[St] ; k != <span class="number">-1</span>; k = e[k].next)</span><br><span class="line">        <span class="keyword">if</span> (dis[e[k].to] == dis[St] + <span class="number">1</span> &amp;&amp; (Fl = dfs(e[k].to, Aim, min(Flow, e[k].v))))&#123;</span><br><span class="line">            res += Fl, e[k].v -= Fl, e[k ^ <span class="number">1</span>].v+= Fl ;</span><br><span class="line">            Flow -= Fl ; <span class="keyword">if</span> (!Flow) <span class="keyword">break</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N; ++ i) cur[i] = head[i] ;</span><br><span class="line">        res += dfs(S, T, <span class="number">0x7fffffff</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; S &gt;&gt; T ;</span><br><span class="line">    fill (head + <span class="number">1</span>, head + N + <span class="number">1</span>, <span class="number">-1</span>) ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= M;  ++ i) </span><br><span class="line">        A = qr(), B = qr(), C = qr(), add(A, B, C) ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Dinic() ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，那么我们不难看出$cur$其实就是为了防止我们不断重复枚举边。因为对于一次$dfs$，在同一张分好层次的图上执行，不会出现重复用一条边的情况——我们认为每条边已经流满。那么当前弧可以保证不会重复走。而复杂度没有变，但是确实会更快。</p><p>那么接下来证明一下$Dinic$的时间复杂度。</p><p>根据分层图而言，$t$的层次是单调增长的——因为每次增广完毕之后对于每条可行的增广路，都总会有至少一条边容量为零，所以最多会有$n$次重新分层。而对于每次在增广网上的操作，至多有$m$条增广路（每条边至多有一次机会置零），每条增广路要回溯+搜索总共$O(2n)$的操作。那么渐进意义上复杂度就是$\Theta(n^2m)$的。</p><p>很显然，这在随机数据的情况下也是跑不满的。而加了当前弧优化，复杂度理论上还是不变的，或者说，在跑满的情况下，复杂度更接近上限复杂度$\Theta(n^2m)$ 。</p><p>据说随机图上跑个$1 \cdot 1e4$~$5 \cdot 1e4$是没什么问题的。</p><p>最后我们来说一下费用流。</p><h2 id="0x03-费用流（最小费用最大流）"><a href="#0x03-费用流（最小费用最大流）" class="headerlink" title="$0x03$ 费用流（最小费用最大流）"></a>$0x03$ 费用流（最小费用最大流）</h2><p>其实费用流……常见的，就是在最大流的前提下费用最小。那么我们直接把$EK$的$bfs$换成$SPFA$就行了233</p><p>至于为什么不能$dinic$，很显然是因为没法分层啊……$hhh$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 1926081700</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">int</span> N, M, S, T ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, v, c ;</span><br><span class="line">&#125;e[MAX &lt;&lt; <span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">bool</span> mark[MAX] ; <span class="keyword">int</span> MAX_F, MAX_C, i ;</span><br><span class="line"><span class="keyword">int</span> head[MAX], cnt = <span class="number">-1</span>, pre[MAX], now ;</span><br><span class="line"><span class="keyword">int</span> A, B, C, D, Last[MAX], _F[MAX], dis[MAX] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span> ; <span class="keyword">char</span> c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt;= <span class="string">'9'</span> &amp;&amp; c &gt;= <span class="string">'0'</span>) k = (k &lt;&lt; <span class="number">1</span>) + (k &lt;&lt; <span class="number">3</span>) + c - <span class="number">48</span>, c = getchar() ;</span><br><span class="line">    <span class="keyword">return</span> k ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    e[++ cnt].to = v, e[cnt].v = w ;</span><br><span class="line">    e[cnt].next = head[u], e[cnt].c = c, head[u] = cnt ;</span><br><span class="line">    e[++ cnt].to = u, e[cnt].v = <span class="number">0</span> ;</span><br><span class="line">    e[cnt].next = head[v], e[cnt].c = <span class="number">-1</span> * c, head[v] = cnt ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q ;</span><br><span class="line">    fill(_F, _F + N + <span class="number">1</span>, Inf) ;</span><br><span class="line">    fill(dis, dis + N + <span class="number">1</span>, Inf) ;</span><br><span class="line">    fill(mark, mark + N + <span class="number">1</span>, <span class="number">0</span>) ;</span><br><span class="line">q.push(S), dis[S] = <span class="number">0</span>, mark[S] = <span class="number">1</span>, pre[T] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">        now = q.front() ; q.pop() ; mark[now] = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = head[now]; k != <span class="number">-1</span> ; k = e[k].next)</span><br><span class="line"><span class="keyword">if</span> (dis[e[k].to] &gt; dis[now] + e[k].c &amp;&amp; e[k].v)&#123;</span><br><span class="line">                dis[e[k].to] = dis[now] + e[k].c ;</span><br><span class="line">                _F[e[k].to] = min(e[k].v, _F[now]) ;</span><br><span class="line">                pre[e[k].to] = now, Last[e[k].to] = k ;</span><br><span class="line"><span class="keyword">if</span>(!mark[e[k].to])&#123;</span><br><span class="line">q.push(e[k].to) ;</span><br><span class="line">mark[e[k].to] = <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> dis[T] != Inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _EK()&#123;</span><br><span class="line">    <span class="keyword">while</span>(SPFA())&#123;</span><br><span class="line">        now = T, MAX_F += _F[T], MAX_C += dis[T] * _F[T] ;</span><br><span class="line">        <span class="keyword">while</span>(now != S)</span><br><span class="line">            e[Last[now]].v -= _F[T], e[Last[now] ^ <span class="number">1</span>].v += _F[T], now = pre[now] ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; S &gt;&gt; T ;</span><br><span class="line">    fill (head + <span class="number">1</span>, head + N + <span class="number">1</span>, <span class="number">-1</span>) ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= M; ++ i)</span><br><span class="line">        A = qr(), B = qr(), C = qr(), D = qr(), add(A, B, C, D) ;</span><br><span class="line">    _EK() ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MAX_F &lt;&lt;<span class="string">" "</span>&lt;&lt; MAX_C &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 但是$SPFA$他，他他他他他已经死在了$NOI2018$……</p><p>那么我们考虑是否能用$dijkstra$来做。那我们要考虑的就是负权边，因为我们建的反向边是要把代价也跑回去的啊，所以我们致力于解决负权边问题。$rqy$当时是这么给我们讲的：</p><blockquote><p>考虑给每个点加一个“势”$h$ 。一条$u$ → $v$ 的费用为 $c$ 的边变成一条$u$→$v$费用是$c−h_v+h_u$ 的边。</p></blockquote><p>那么我们从点$S$到点$B$点的距离便从$dis_B$变成了$dis_B + h_s- h_B$，我们最后只需要把原来的势函数减去即可。</p><p>下面我们思考到底要选取什么作为势函数呢？</p><p>我们考虑将上次求出的最短路作为势函数，为什么呢？$rqy$是这么说的：</p><blockquote><p>这为什么是对的呢? </p><p>考虑一条边 $u→v$ ，费用为 $c$ 。</p><p>如果它上一次增广时残量不为 $0$ ，那么根据最短路的性质有$dis_u + c ≥ dis_v$ (不然的话说明最短路求错了)。 如果它上次增广时残量为 $0$ 而现在不为 $0$ ，那说明它的反向边被增广了。而增广的路径是最短路径，反向边是 $v → u$，费用 $−c$ 。所以$dis_v$ =$dis_u −c$ ，也就是说 $-c+dis_u −dis_v = 0$ 也是非负的，那么$w+h_u −h_v$就是非负的。 </p></blockquote><p>于是我们现在可以用 $Dijkstra$ 增广，很快而且更难卡( </p><p>至于代码，大概长这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 192608170</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, c, f ;</span><br><span class="line">&#125;e[MAX &lt;&lt; <span class="number">1</span>] ; <span class="keyword">int</span> H[MAX], S ;</span><br><span class="line"><span class="keyword">int</span> dist[MAX], _F[MAX], Pre[MAX], i, k ;</span><br><span class="line"><span class="keyword">int</span> N, M, A, B, C, D, cnt = <span class="number">-1</span>, x1, x2, head[MAX] ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> dist, num ;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp; now) <span class="keyword">const</span>&#123;<span class="keyword">return</span> dist &gt; now.dist ; &#125;</span><br><span class="line">&#125;; priority_queue&lt;node&gt; q ; <span class="keyword">bool</span> vis[MAX] ; <span class="keyword">int</span> Last[MAX], MAX_F, MAX_C, t, ww ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span> ; <span class="keyword">char</span> c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) c = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (c &lt;= <span class="string">'9'</span> &amp;&amp; c &gt;= <span class="string">'0'</span>) k = (k &lt;&lt; <span class="number">1</span>) + (k &lt;&lt; <span class="number">3</span>) + c - <span class="number">48</span>, c = getchar() ;</span><br><span class="line">    <span class="keyword">return</span> k ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    e[++ cnt].to = v, e[cnt].f = f ;</span><br><span class="line">    e[cnt].next = head[u], e[cnt].c = c, head[u] = cnt ;</span><br><span class="line">    e[++ cnt].to = u, e[cnt].f = <span class="number">0</span> ;</span><br><span class="line">    e[cnt].next = head[v], e[cnt].c = <span class="number">-1</span> * c, head[v] = cnt ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N; ++ i) dist[i] = _F[i] = Inf, vis[i] = <span class="number">0</span> ;</span><br><span class="line">    q.push((node)&#123;<span class="number">0</span>, S&#125;) ; dist[S] = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node now = q.top() ; q.pop() ; </span><br><span class="line">        <span class="keyword">while</span>(vis[now.num]&amp;&amp;!q.empty()) now = q.top(), q.pop();</span><br><span class="line">        x1 = now.num, x2 = now.dist ; <span class="keyword">if</span>(vis[x1]) <span class="keyword">continue</span> ; </span><br><span class="line">        vis[x1] = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">for</span>(k = head[x1] ; k != <span class="number">-1</span> ; k = e[k].next)</span><br><span class="line">            <span class="keyword">if</span> (e[k].f &gt; <span class="number">0</span> &amp;&amp; !vis[e[k].to] &amp;&amp; dist[e[k].to] &gt; x2 + e[k].c + H[x1] - H[e[k].to])&#123;</span><br><span class="line">                <span class="keyword">int</span> T = e[k].to ; dist[T] = x2 + e[k].c + H[x1] - H[T] ;</span><br><span class="line">                _F[T] = min(_F[x1], e[k].f), Pre[T] = x1, Last[T] = k, q.push((node)&#123;dist[T], T&#125;) ;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[t] &lt; Inf ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _EK()&#123;</span><br><span class="line">    <span class="keyword">while</span>(dijkstra())&#123;</span><br><span class="line">        ww = t, MAX_F += _F[t], MAX_C += (dist[t] - H[S] + H[t]) * _F[t] ;</span><br><span class="line">        <span class="keyword">while</span>(ww != S)</span><br><span class="line">            e[Last[ww]].f -= _F[t], e[Last[ww] ^ <span class="number">1</span>].f += _F[t], ww = Pre[ww] ;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; ++ i) H[i] += dist[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; S &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt;= N ; ++ i) head[i] = <span class="number">-1</span> ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= M ; ++ i)</span><br><span class="line">        A = qr(), B = qr(), C = qr(), D = qr(), Add(A, B, C, D) ;</span><br><span class="line">    _EK() ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MAX_F &lt;&lt; <span class="string">" "</span> &lt;&lt; MAX_C &lt;&lt; <span class="built_in">endl</span> ; <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://www.orchidany.cf/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="网络流-最大流" scheme="http://www.orchidany.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="网络流-费用流" scheme="http://www.orchidany.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>随想二·丘吉尔</title>
    <link href="http://www.orchidany.cf/2018/08/08/%E9%9A%8F%E6%83%B3%E4%BA%8C/"/>
    <id>http://www.orchidany.cf/2018/08/08/随想二/</id>
    <published>2018-08-08T08:29:29.000Z</published>
    <updated>2019-02-14T14:53:33.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“随想”系列索引：<a href="http://www.orchidany.cf/2050/12/31/%E9%9A%8F%E6%83%B3%C2%B7%E7%9B%AE%E6%AC%A1%E8%A1%A8/">戳我</a></p><hr><p>啊……还有几十天就$NOIp$了啊……</p><p>现在是下午四点，机房。</p><p>比我弱的都在颓废，比我强的都在做题。</p><p>唯独我在写博客。</p><p>我在想些什么呢？</p><hr><p>我是$pks$，没错，我不敢称自己为$Flower_pks$，不敢称自己为“花”，因为这跟我实力不符——我不是那个在$Luogu$这个$OJ$上小有名气的大佬，不是那个题解写得十分详细的作者，更不是$SD$集训里面排的上号的人。</p><p>没错，我不配啊。</p><p>上午$rqy$出题，大概是被全方面碾压了吧。省队培训时虽然也考不多好，但是在学校里被平日里玩的很好的朋友碾压却是更加痛苦——我看不见路。</p><p>旁边的窗帘紧紧地闭着、贴着窗户，多云的日子里，挤进来阳光总是给人一种异样的感觉，洒在我的右肩上。</p><p>撇过头来看键盘上发着光的$w$键，突然有种想哭的欲望。</p><hr><p>我是真弱啊。</p><p>$NOIp$现在省一都不稳吧，也就会写几个省选才会考到的板子了；板子也不怎么可以打出来吧，毕竟没有很强的记忆力——天生就是个弱者啊。</p><p>我总是特别羡慕别人敏锐的反应能了，羡慕独到的数学天赋，羡慕稳重的答题习惯，羡慕……</p><p>但我什么也没有。我也不是个富有毅力的人。</p><hr><p>我一直极其富有自尊，十分的自尊。所以我会拼了命地学别人不会的算法，并且十分不喜欢别人善意的和我共同进步，毕竟因为我太弱太弱。</p><p>我发现我这个人好诡异啊……其余走$OI$路的人都没有这种心理波动，只有我会把时间放在这上面吧。</p><p>估计是我什么都不适合吧。</p><hr><p>其实我不是特别喜欢去接近那些很强的人，因为他们总是凭着自己的实力不顾别人的感受。大概在这样的教育制度下，学习好、得了银牌或者怎样，才会有发言权吧。</p><p>这种人强到让我厌恶。也让我悲哀。</p><p>好啦好啦你强好啦……我滚粗好了吧……</p><p>我并不是很服气，但是现实却总是不尽人意。</p><p>过去我一直能依靠着的、可以包容我的人已经与我一别两宽了，  估计以后也只能靠自己了吧。</p><p>我并不知道为什么我要选择承受这么多，大概是天性使然吧。</p><hr><p>我把丘吉尔的一句话当作人生的信条——当然不是唯一的信条。</p><blockquote><p>二战结束后的一天，年老的丘吉尔来到英国下议院，坐在一个年轻的议员旁边，突然问道：“年轻人，你知道是什么东西支撑我在各方面都取得了如此巨大的成就吗？”这个年轻的一员用非常渴望的眼神等待着这位德高望众的伟大人物的教诲，他说：“我非常想知道。”<br>“虚荣心！强烈的虚荣心！”丘吉尔大声说道，随即哈哈大笑，起身而去。</p></blockquote><p>路在哪呢……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="随想/下下笔" scheme="http://www.orchidany.cf/tags/%E9%9A%8F%E6%83%B3-%E4%B8%8B%E4%B8%8B%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随想一·杨柳岸晓风残月</title>
    <link href="http://www.orchidany.cf/2018/08/02/%E9%9A%8F%E6%83%B3%E4%B8%80/"/>
    <id>http://www.orchidany.cf/2018/08/02/随想一/</id>
    <published>2018-08-02T13:30:29.000Z</published>
    <updated>2019-02-14T14:53:14.332Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“随想”系列索引：<a href="http://www.orchidany.cf/2050/12/31/%E9%9A%8F%E6%83%B3%C2%B7%E7%9B%AE%E6%AC%A1%E8%A1%A8/">戳我</a></p><hr><p>我是花，来自山东，今时今日写下这一篇，只是为了给并肩的$Oiers$一个不算多美的故事，为了给后来的$Oiers$一个对未来有所期望的愿景。</p><p>看着眼前发黄的电脑屏幕，不知道该说些什么。</p><p>现在的我即将高一，有着比较厉害的学长，和什么都不会的教练，每天来机房就是刷题-&gt;不会-&gt;刷题-&gt;不会。</p><p>大概我马上就要习惯了吧。</p><p>闷热的八月让人有一种说不出的惆怅，大概是初中毕业旧事未了，或者是即将$NOIp$但却并没太大信心，或者是教练总是给出不尽人意的安排打乱计划。</p><p>我捏着手边新换上的眼镜腿儿，默默地想到。</p><p>我依稀记得几个月前的快乐场景：每天都在学新算法、不亦乐乎地学、废寝忘食地学。最讨厌做模拟题、玛丽题或者搜索题。最喜欢去学习新的算法，所以导致我整天刷模板题：线段树、$Splay$、$LCA$……偶尔会兴致盎然地发几篇题解，也总是会用最生动的语言，盯着$luogu$的$markdown$那方小小的编辑框，一个字一个字地码着。二月的培训让我觉得是最有意义的一次培训了，大多数精致的$blog$都出自那时。一般都是回到宾馆后，开始联机颓废，等到半夜凌晨开始写博客，写到鱼肚泛白或者困意袭来才罢休。</p><p><img src="qwq1.png" alt=""><img src="qwq2.png" alt=""><img src="qwq3.png" alt=""></p><p>可真是让人高兴的回忆啊……</p><p>回想这几个月，变化是日新月异的——就如同把一颗小小的石子扔进一池静水，起初不见多大声势，静候才可见其早已涤荡了半池——是波纹展开了。一开始来这儿，是实力悬殊的——初中有人努力、也有人不努力；初中时都挺聪明，在班里都名列前茅；初中时上奥赛几乎等于颓废，因为没多少人真正地在做题……</p><p>可惜时光不容许保留原来的模样。</p><p>主任盯得紧，教练怂主任从而也盯得紧；大多数人都因为外力的因素必须要努力，但也有根本不想努力的人；以前可以骄傲的资本、譬如文化课，现在早就变成了一纸空谈——作为所谓“奥赛负责人”的我，看到来到实验部第一次的月考成绩时，看到级部前二十（这一级实验部一共$116$个人）充斥着数学物理化学生物奥赛的人、却又跟信息学奥赛没有任何关系时，我不知道该怎么做。</p><p>于是我便开始加大压力：组织学生定期讲课、定期比赛。用这种空泛的压榨时间的行为来压榨效率无疑是可笑的，但是也起了一部分好的效果：几个$NOIp$内容都没会熟练的家伙开始跃跃欲试地学习$Splay$、学习网络流……我不知道这样做是否真的好，就如同我不知道我学习新东西是否会在十月、甚至十一月之前压垮所有人的神经——学完新东西、反过头来发现基础却根本不牢固——就如同为了学新知识，而去学新知识。这种功利让我不知道现在在走着一条怎样的路。</p><p>终于，差距出来了。经过几个月训练、实力强劲的人自然涌了上来，也有根本不行的人光辉逐渐黯淡。二月时的能力局面现在早就会焕然一新，有人选择走，有人选择苟活。我不清楚原来那些充满骄傲的、惬意的脸庞如今去了哪里，我只知道我给他们定的目标是今年全部省一、我只知道来到实验部之后，只能选择负重前行。</p><p>看着机房里其他人的变化，就宛如翻完了一部小说一般，跌宕而符合逻辑。</p><hr><p>告别了初中，留下了什么呢？或许是由于自身意气用事而破坏了原本纯洁的友情，但是我不能——真的不能仅仅把$Ta$当作一个不世出的好朋友。但当我跨越了自身的那一步之后才发现原来无人等候，才发现我只能把一些事情抛撒在风里，然后安慰自己“没事”。</p><hr><p>我喜欢李宗盛，喜欢他的歌里面唱出的人间无奈。而最喜欢的是他的《山丘》:</p><blockquote><p>给自己随便找了个理由，<br> 向情爱的挑逗，命运的左右。<br> 不自量力地还手，直至死方休——<br> 越过山丘——虽然已白了头；<br> 喋喋不休——时不我予的哀愁；<br> 还未如愿见着不朽<br> 就把自己先搞丢——<br> 越过山丘——才发现无人等候；<br> 喋喋不休——再也唤不回了温柔；<br> 为何记不得上一次是谁给的拥抱<br> 在什么时候。</p></blockquote><p>大概是能唱出柳永“杨柳岸晓风残月”几分意味的吧。</p><p>$2018/8/4​$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="随想/下下笔" scheme="http://www.orchidany.cf/tags/%E9%9A%8F%E6%83%B3-%E4%B8%8B%E4%B8%8B%E7%AC%94/"/>
    
  </entry>
  
</feed>
