<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[$CF\#536Div2$の题解($E\&F$)]]></title>
    <url>%2F2019%2F02%2F08%2FCF-536Div2%E3%81%AE%E9%A2%98%E8%A7%A3-E-F%2F</url>
    <content type="text"><![CDATA[$CF#536Div2$の题解($E\&amp;F$)$0x01~~Preface$$emmm$这次CF本身打的很顺畅，但是居然unrated了……咕咕咕咕 这是头一次CF有比赛我全部题目都做了……可喜可贺可喜可贺233 简单总结一下前面四道题$\color{red}{Link}$： A题：sb题，$O(n^2)$枚举的红题（或许都不到），但是我$check$的时候太粗心WA了一次身败名裂XD B题：sb题，一个模拟，需要一个可以处理优先级的数据结构（其实就是堆但是我一开始想的是线段树） C题：sb题，一个贪心（其实是数学上可proof的数学题但被我当贪心题做了XD），大概就是你胡乱排个序之后胡搞一下就好。 D题：水题，思考一下可得，我们只需要写一个BFS+一个优先队列即可，因为无向图+随便走=胡搞八搞 下面两道题就好像不是那么水了qaq $0x02~~E\cdot \text{Lunar New Year and Red Envelopes}$$\color{red}{Link}​$ 简单来说就是给$k$个区间，每个区间一个左端点$s$一个右端点$e$，同时还有一个蜜汁·右端点$t$。顺着时间线$1$~$n$，可以从$s_i$到$e_i$的时间内选择获得$w_i$的收益，但同时下次的选择必须在$t_i$之后。 最大化收益的思路下，有$m$次机会让选择者在某个时间点啥都不干。求最小的收益。 $\mathfrak {Solution}$呃，其实比较容易的发现就是个时间线$DP$。根据”$n$不大就DP$n$”的是指导思想（瞎扯的），我们应该按时间$DP$。那么第一步就是把每个区间的信息映射到时间线上去。这个时候有一个比较妙的$idea$。首先我们给每个区间的$s$和$e+1$在时间线上分别打上不同的标记，之后我们考虑沿时间线从前向后扫描每一段区间，每当遇到一个区间的$s$时就丢到一个$multiset$里面，反之遇到$e+1$时就$erase$。然后这样我们只顺便乱搞一下就可以得出每个时间点最优的方案。 之后？之后就直接$nm$的DP啊，毕竟$nm$只有$20million$那么大。 Ps:由于STL中multiset一删删一串的zz性质，改用map惹qaq 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;map&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#define MAXM 233#define MAXN 100010using namespace std ;struct time_node&#123; int mark, d, w ; bool operator &lt; (const time_node &amp;T) const &#123; return w &gt; T.w || (w == T.w &amp;&amp; d &gt; T.d); &#125;&#125; base[MAXN] ; map &lt;time_node, int&gt; M_set ; vector&lt;time_node&gt;Time[MAXN] ; long long Ans ;int N, M, K, A, B, C, D, i, j ; long long dp[MAXN][MAXM] ; int main()&#123; cin &gt;&gt; N &gt;&gt; M &gt;&gt; K ; memset(dp, 63, sizeof(dp)) ; for (i = 1 ; i &lt;= K ; ++ i)&#123; scanf("%d%d%d%d", &amp;A, &amp;B, &amp;C, &amp;D), Time[A].push_back((time_node)&#123;1, C, D&#125;) ; Time[B + 1].push_back((time_node)&#123;2, C, D&#125;) ; &#125; for (i = 1 ; i &lt;= N ; ++ i)&#123; register int tot = Time[i].size() ; for (j = 0 ; j &lt; tot ; ++ j) if (Time[i][j].mark == 1) ++ M_set[Time[i][j]] ; else M_set[Time[i][j]] &gt; 1 ? M_set[Time[i][j]] -- : M_set.erase(Time[i][j]) ; if (M_set.size()) base[i] = (*M_set.begin()).first ; else base[i] = (time_node)&#123;0, i, 0&#125; ; &#125;dp[0][0] = 0, Ans = dp[1][1] ; for (i = 1 ; i &lt;= N ; ++ i)&#123; for (j = 0 ; j &lt;= M ; ++ j)&#123; j &gt; 0 ? dp[i][j] = min(dp[i - 1][j - 1], dp[i][j]) : 1 ; dp[base[i].d][j] = min(dp[base[i].d][j], dp[i - 1][j] + base[i].w) ; &#125; &#125; for (i = 0 ; i &lt;= M ; ++ i) Ans = min(Ans, dp[N][i]) ; cout &lt;&lt; Ans &lt;&lt; endl ; return 0 ;&#125; $0x03~~F\cdot \text{Lunar New Year and a Recursive Sequence}$]]></content>
      <tags>
        <tag>动态规划-普通DP</tag>
        <tag>BSGS</tag>
        <tag>线性代数-矩阵</tag>
        <tag>CodeForces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[$Lagrange ~Formula$]]></title>
    <url>%2F2019%2F02%2F07%2FLagrange-Formula%2F</url>
    <content type="text"><![CDATA[拉格朗日插值公式 $\rm{Lagrange~Interpolation~Formula}$$\rm{0x01~~} Preface$插值($Interpolaton$) 在多项式域中可以看做是求值$(Evaluation)$的逆运算，即给定$n$组确定的本质不同的二元组$(x_i, y_i)$，满足$F(x_i) = y_i$，可以逆向求出原$n$次多项式。 而其实，拉格朗日插值公式本身是标准的$\Theta(n^2)$算法——或者不能称其为算法，运算过程$\Theta(n^2)$或许会更准确一些。$Indeed$，该公式是构造出来的，所以没有多么繁琐的证明—— $\rm{0x02}~~\rm{Proof}$$Proof ~of~Existence$​ 我们定义$F(x)$为一在实数域上的平凡$n-1$次多项式。 ​ 首先我们需要构造一个对于第$i​$个二元组的特殊多项式$L_i(x)​$，满足$$L_i(x_j) = \begin{cases}1, &amp;\rm{i=j} \ 0, &amp; \rm{i \neq j}\end{cases}​$$ 那么我们所求的多项式$F(x)​$就可以写作$$F(x) = \sum L_i(x_i)\cdot y_i​$$这个式子保证了我们对应的$n​$个二元组，$F(x)=y​$恒成立。 ​ 那么对于$L_i(x)​$，我们考虑由我们对$L_i(x)​$的定义可以得出$$L_i(x) = k_i(x-x_1)(x-x_2)\cdots(x-x_n)​$$其中不包含$x-x_i​$这一因式。而由$L_i(x_i)=1​$可知我们的比例系数$$k_i=\frac{1}{(x_i-x_1)(x_i-x_2)\cdots(x_i - x_{i-1})(x_i - x_{i+1})\cdots(x_i-x_n)}​$$那么$$L_i(x) = \prod\limits_{i=1, i \neq j}^{n}\frac{x - x_j}{x_i-x_j}​$$从而$$F(x)=\sum L_i(x)\cdot y_i(x) = y_i \cdot \prod\limits_{i=1, i \neq j}^{n}\frac{x - x_j}{x_i-x_j}​$$ $\mathcal{Q.E.D.}$ $Proof~of~Uniqueness^{[1]}$​ 我们接下来要证明的是多项式$L_i(x)​$的唯一性 ​ 我们假设同时有两个实数域上的$n-1​$次多项式$L_1(x),L_2(x)​$满足$L_i(x_j) = \begin{cases}1, &amp;\rm{i=j} \ 0, &amp; \rm{i \neq j}\end{cases}​$，那么我们由作差法可以得出多项式$L_{\Delta} = L_1 - L_2​$在取所有的$x_i​$时，其值均为$0​$。那么一定会有多项式$$L’(x) = \prod\limits_{i=1}^{n}(x - x_i)​$$满足$$L’|L_{\Delta}​$$ 其中$|​$表示多项式整除。但是我们知道，对于$L’​$这个多项式，其次数为$n-1​$；而对于我们所定义的$L_i(x)​$，均为$(n-2)​$次的，从而$L_{\Delta}​$也是$n-2​$次多项式。所以我们可以得出$$L_{\Delta} = 0​$$从而有$$L_1=L_2​$$ $\mathcal{Q.E.D.}$$\rm{0x03~\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}}$1234567891011121314151617181920212223242526272829303132333435363738题号：Luogu4781#include &lt;cstdio&gt;#include &lt;iostream&gt;#define MAXN 2020#define LL long long#define Mod 998244353using namespace std ; LL Ans, xs ;int N, i, j ; LL T, t, xv[MAXN], yv[MAXN] ;inline LL expow(LL A, LL B)&#123; LL res = 1 ; while (B)&#123; if (B &amp; 1) (res *= A) %= Mod ; B &gt;&gt;= 1, (A *= A) %= Mod ; &#125; return res ;&#125;int main()&#123; cin &gt;&gt; N &gt;&gt; T ; for (i = 1 ; i &lt;= N ; ++ i) scanf("%lld%lld", &amp;xv[i], &amp;yv[i]) ; for (i = 1 ; i &lt;= N ; ++ i)&#123; t = 1 ; for (j = 1 ; j &lt;= N ; ++ j)&#123; if (i == j) continue ; (t *= (xv[i] - xv[j] + Mod)) %= Mod ; &#125; t = expow(t, Mod - 2) ; for (j = 1 ; j &lt;= N ; ++ j)&#123; if (i == j) continue ; (t *= (T - xv[j] + Mod)) %= Mod ; &#125; (t *= yv[i]) %= Mod, (Ans += t) %= Mod ;// cout &lt;&lt; Ans &lt;&lt; endl ; &#125; printf("%lld", Ans) ; return 0 ;&#125; $\rm{Reference}$ $[1] $:Angel_Kitty的$blog$《拉格朗日插值法》 $^{^{[\nearrow ]}}$ $\mathfrak{writter:pks}$]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>Math - Lagrange Formula</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[群论入门]]></title>
    <url>%2F2019%2F02%2F06%2F%E7%BE%A4%E8%AE%BA%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[写在前面：群作为抽象代数领域中比较基础的一环，同时也是沟通初等代数、初等几何与抽象代数的桥梁，着实打开了笔者的眼界。此篇blog旨在泛泛谈一些比较基础的群论内容，包括群的基本定义，子群的概念，阶的概念等等，不存在较为艰深的内容。 群$1~)~$群的定义比较简单的来讲，所谓群$(\rm{group})$指的是一类特殊的集合，这个集合包含一组元素和大于等于一个的运算，比如乘法群救记作$(G,\cdot)$。那么平凡来讲，群满足下列几个性质： 我们假定一个平凡的群$G$支持$\color{purple}{qwq}$这种运算： $Property1~~$封闭性$\forall a\in G, b\in G, a~\color{purple}{qwq}~b \in G$$Property2~~$运算的结合性$(a~\color{purple}{qwq}~b) ~\color{purple}{qwq}~ c=a~\color{purple}{qwq}~ (b ~qwq~ c)$$Property3~~$存在单位元（幺元）满足以下定义：$\exists e\in G, s.t. \forall a\in G, e~\color{purple}{qwq}~ a=a~\color{purple}{qwq}~e=a$$Property4~~$对于每个元素，存在逆元，即满足 $\forall a\in G, \exists b\in G, s.t. a~\color{purple}{qwq}~ b=b~\color{purple}{qwq}~a=e$那么也就是说的直白点吧，对所有的元素，做完该群所带有的带有结合律的运算之后，所得结果仍然属于该群且一定存在单位元，对于每个元素存在运算逆元。 那我们不妨定义一些其他的： 阿贝尔群$(Abel~ Group)$：即交换群——运算满足交换律的群。 半群：满足封闭性和结合律的群。 有限群$(Finite~Group)$：元素个数有限的群称为有限群,而有限群的元素个数称作有限群的阶 结合几个例子来解释一下： 比如以下是几个乘法群 $$ (Q\setminus{0}~,~\cdot)$$, $$(R\setminus{0}~, ~\cdot)$$,$$ (C\setminus{0}~,~\cdot)$$ 他们都不能包括$0$这个元素，因为这个元素显然是没有逆元的。 或者一个好玩儿的乘法群$$({1,-1}~~, ~~\cdot)​$$或者是所有非奇异的$n​$阶矩阵也可以组成一个乘法群。 或者是$$(Z~,~+)$$这个群比较经典$233$，其中我们借助这个来练习一下如何判断是否成群,首先思考，这个东西一定是封闭的，因为最后会收敛于$\pm \inf$所以一定封闭，其次运算是一定符合结合律的，然后单位元肯定就是$0$，最后逆元的话，对于$n$那就一定是$-n$了（紧扣定义即可）。 $Extra \ \ Things :$ 以下是两种复合抽代数据结构（名字自己起的$233$）： 环：定义在两个运算上，$(G,+,\cdot)$其中$(G,+)$是阿贝尔群，$(G,\cdot)$是半群举例子：$Z$, $R[x]$，即整数环和$R$上的所有多项式的集合。 域：同样定义在两个运算上，$(F,+,\cdot)$其中$(F,+)$是阿贝尔群，$(F\setminus{0},\cdot)$是阿贝尔群举例子 ：$Q,R,C$即有理数域、实数域和复数域。 好的，那我们尝试证明两个命题： $Proposition1~~~~$一个群中的单位元唯一设有两个单位元$e_1,e_2$ 那么$e_1=e_1e_2=e_2$，其实是一个$233$ $Proposition2~~~~$群中元素的逆元唯一以乘法群为例，假设$a$有两个逆元$b,c$，那么一定会有$$b = b \cdot(a \cdot c) = (b \cdot a) \cdot c = c$$ 显然也是同一个。 那么此时我打算整理一个群的共性特征：$$(ab)^{-1}=b^{-1}a^{-1}$$ 很显然，证明如下：$$ab(b^{-1}a^{-1})=b^{-1}a^{-1})ab=e$$ 提这个的目的就是，我们发现在矩阵的相关内容里面也有这件事儿~所以就很开心 那么之后我们讨论周期 对于一个元素$a \in G$而言，我们记$a$的周期是$o(a)$ $o(a)$表示最小正整数，使得$a^{o(a)}=e$ $2~)~$子群及衍生本节所指“群”没有特别说明便均为有限群 不妨先给出子群的浅显版定义： 如果对于一个群$(G, C)$ ，其中$H\subseteq G$,，且 $(H,C)$是群，那么我们称在运算$C$下，$H$是$G$的子群，用$H\leq G$表示那么从而我们可以定义生成子群这个东西： 生成子群：若$S \subseteq G​$， 并且对于运算$C​$而言，$(G,C)​$也是一个群，那么就称$G​$为集合$S​$在运算$C​$下的生成子群。集合$S​$的生成子群用$&lt;​$$S​$$&gt;​$表示 这之后我们就可以定义陪集这个概念 陪集一般上包含左陪集和右陪集。 左陪集：如果$H \leq G$，对于$a \in G$，定义集合$H_a = {x\in G~|~ \exists h\in H, ah=x}$为$H$的与元素$a$左陪集。右陪集： 如果$H \leq G$，对于$a \in G$，定义集合$H_a = {x\in G~|~ \exists h\in H, ha=x}$为$H$的右陪集。$233$也可以叫做傍集或者旁系之类的~ 那么我们这个地方先只研究右陪集$233$ $Lemma1:$我们首先证明一点：$|H|=|H_a|$，其中长得像绝对值符号的竖线表示的是有限群的群中元素数量。 这个其实比较显然，因为事实上群都是定义在非可重集上面的。 较为严谨的证明如下： $Proof.$ 对于$H \leq G$，如果$h_1\neq h_2 \in H$，那么$h_1a\neq h_2a$ 反证：若$h_1a=h_2a$，$h_1aa^{-1}=h_2aa^{-1},~h_1=h_2$矛盾 对于不同的$h$，$ha$互不相同，因此$|H_a|=|H|$ $Lemma2:$之后我们再证明一些好玩儿的： 命题：$H_a=H_b$当且仅当$ab^{-1}\in H$ 看起来好像不是那么好玩…… $Proof.$ 若$H_a=H_b$，则$ea\in H_a$，即$a\in H_b$，那么$\exists h\in H,~a=hb$,那么$ab^{-1}=h$ 若$ab^{-1}\in H$，那么$ha=ha(b^{-1}b)=(hab^{-1})b\in Hb$，因此$H_a\subseteq H_b$ $hb=hb(a^{-1}a)=h(ab^{-1})^{-1}a\in H_a$，故$H_b\subseteq H_a$ 因此$H_a=H_b$ 那么我们还可以有一个推论： 若$H_a\neq H_b$，那么$H_a\cap H_b = \emptyset$ $Proof.$ 假设$x\in H_a\cap H_b$， 则$\exists h_1,h_2\in H$，$h_1a=h_2b=x$ ， 那么$ab^{-1}=h_1^{-1}h_2\in H$，那么$H_a=H_b$，矛盾 从而还可以有个定理（$Lagrange$定理）： 由于$\forall g\in G$， $g\in Hg$，所以$G$中每个元素都在某个傍集中。用$[G:H]$表示不同的傍集数，那么 $$|G|=|H|\cdot [G:H]$$ 也就是说$|H|$是$|G|$的约数。 这个其实很显然，因为不同元素的傍集如果不同就不会有交集，如果相同就不会被考虑到$[G:H]$里面。所以结论平凡。 但是其实这是个很伟大的定理$233$ 好的，那么从而就会有一些神奇的推论： 推论一 ： 对于一个元素$a \in G$，$G$是一个群，那么$o(a) | |G|$ $Proof.$ 因为$o(a) = |$$&lt;$$a$$&gt;$$|$，由我们刚刚证明的定理可以得出$o(a) | |G|$ 推论二：对任意的$a \in G,a ^{|G|} = e$ $Proof.$ 比较显然，由推论一可知。 推论三：若$|G|$为素数，则$G$是循环群 $Proof.$ 若$a \neq e$，那么会有$|$$&lt;$$a$$&gt;$$|$整除$|G|$。而由于$|G|$是个素数，所以只有可能$|G| = |$$&lt;$$a$$&gt;$$|$ ，所以$G$是个循环群。 接下来我们真的要去做些好玩的了~ 定理$1$·$Fermat$小定理如果$p$为素数，那么存在$a^{p-1} \equiv 1 (\mod p) $ $Proof. $考虑质数$p$，考虑群$G=${$1,2,\dots,p-1$}，群的运算定义为对$p$取模的乘法，那么由$Lagrange$可知： $$\forall a\in G, a^{p-1}=1(\mod p)$$ 定理2·$Euler$定理$a^{\phi(n)}=1 (\mod n)$ $Proof.$考虑$n\in N^{+}$，考虑群$G=$ {$1\leq x\leq n~|~gcd(x,n)=1$ },群的运算定义为对$n$取模的乘法 那么会有$|G|=\phi(n)$，从而有： $$\forall a\in G, a^{\phi(n)}=1 (\mod n)$$ 没错，证明十分的简洁美观。 作者被这种神奇的证明给折服了$stO$.]]></content>
      <tags>
        <tag>抽象代数-群论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[$\rm{BSGS-Junior}$]]></title>
    <url>%2F2019%2F02%2F06%2FBSGS-junior%2F</url>
    <content type="text"><![CDATA[$BSGS$$\rm{0x01}$ $\mathcal{Preface}$$\rm{BSGS}(Baby~Step~Giant~Step)$, 大步小步法。当然也会被叫做拔山盖世、北上广深算法……咳，这并不重要。形式化地讲， $\rm{BSGS}$算法主要用来解决以下问题 : 给定质数$p$, 整数$a, b​$, $(a, p)=1​$.求最小的非负整数$x​$, 使得$a^x≡ b~(\mod p)​$而首先我们知道的，是由欧拉定理$a ^{\varphi(p)} ≡ 1 ~(\mod p)​$，并且我们还知道$a^0=1≡1 ~(\mod p)​$，所以我们可以得出一个断言： 如果方程$a^x≡ b~(\mod p)​$有最小非负整数解，那么最小非负整数解一定在$[0, \varphi(p))​$中 $\qquad \qquad(1) ​$ 此处肉眼可以看出其循环节为$\varphi(p)$，不再证明。 之后我们将以此为基础进行类似分块的操作—— $\rm{0x02~~Baby~Step~Giant~Step}$首先我们记$n=\sqrt {\varphi(p)}$，那么$\forall x \in [0, \varphi(p))$, $x = i\times m+j$, $i \leq \lfloor \frac{p−1-m}{m} \rfloor,~~ 0≤j &lt;m$ 。那么对于原方程我们可以把其改为：$$a^{i\cdot n+j}≡ b~(\mod p)$$移一下项就可以变成$$a^j ≡b \cdot a^{-i\cdot n} (\mod p)$$那么现在我们的策略是算出所有$a^j$来，在$\mod p$ 意义下观察是否有一个$i$使得$a^j ≡b \cdot a^{-i\cdot n} (\mod p)$。我们称左边枚举$a^j$叫做小步$(\rm{Baby~Step})$， 称右边枚举$b \cdot a^{-i\cdot n}$叫做大步$~(\rm{Giant~Step})$。 那么其实算法流程很明晰了，我们只需要循环两次、第一次记录的$a^j$用哈希表（$STL$自带$unordered$_ $map$）记录一下即可。 123456789101112131415161718inline LL expow(LL a, LL b, LL p)&#123; LL res = 1 ; while (b)&#123; if (b &amp; 1) (res *= a) %= p ; (a *= a) %= p, b &gt;&gt;= 1 ; &#125; return res % p ;&#125;inline void bsgs(LL x, LL y, LL p)&#123; P = ceil(sqrt(p)), Hash.clear(), Q = expow(x, -P + 2 *(p - 1), p) ; //a ^ (p-1) = 1 (mod p) =&gt; Q = a^(-P) = a ^(-P + p -1) ; for (LL i = 1, j = 0 ; j &lt; P ; ++ j, (i *= x) %= p) if (!Hash.count(i)) Hash[i] = j ; // Push them into hash_table for (LL i = y, j = 0 ; j &lt;= P ; ++ j, (i *= Q) %= p) if (Hash.count(i))&#123; cout &lt;&lt; Hash[i] + j * P &lt;&lt; endl ; return ; &#125; cout &lt;&lt; "-1" &lt;&lt; endl ;&#125; 其中细节还是有的： 计算sqrt时要上取整。 我们在求$a^{-i\cdot n}​$时用的底变量需要由费马小定理求快速幂得出。但是此时指数上可能为负数，所以我们选择加上一个模数，不影响结果。 两次循环枚举的边界要注意有的是$\leq$有的是$&lt;$ 算法还没开始时，要判断本身$a$是否可以被$P$整除。如果不特判这种情况的话，我们上面代码中的Q就会=0，从而在下面的第二个循环处出错——我们的hash[i]和j不能同时为$0$，从而输出错误的答案。 $\rm{0x03}$ 例题$T1~$$LuoguP4028$ 裸题，但是有很多坑……或者说上面列举的细节都涵盖了qaq 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;iostream&gt;#include&lt;tr1/unordered_map&gt;#define LL long longusing namespace std ; using namespace tr1 ; int T ;LL A, B, M, P, Q ; unordered_map &lt;LL, LL&gt; Hash ;inline LL expow(LL a, LL b, LL p)&#123; LL res = 1 ; while (b)&#123; if (b &amp; 1) (res *= a) %= p ; (a *= a) %= p, b &gt;&gt;= 1 ; &#125; return res % p ;&#125;inline void bsgs(LL x, LL y, LL p)&#123; P = ceil(sqrt(p)), Hash.clear(), Q = expow(x, -P + 2 *(p - 1), p) ; //a ^ (p-1) = 1 (mod p) =&gt; Q = a^(-P) = a ^(-P + p -1) ; for (LL i = 1, j = 0 ; j &lt; P ; ++ j, (i *= x) %= p) if (!Hash.count(i)) Hash[i] = j ; // Push them into hash_table for (LL i = y, j = 0 ; j &lt;= P ; ++ j, (i *= Q) %= p) if (Hash.count(i))&#123; cout &lt;&lt; Hash[i] + j * P &lt;&lt; endl ; return ; &#125; cout &lt;&lt; "Couldn't Produce!" &lt;&lt; endl ;&#125;inline LL qr()&#123; LL res = 0 ; char c = getchar() ; while (!isdigit(c)) c = getchar() ; while (isdigit(c)) res = (res &lt;&lt; 1) + (res &lt;&lt; 3) + c - 48, c = getchar() ; return res ;&#125;int main()&#123; cin &gt;&gt; T ; while (T --)&#123; M = qr(), A = qr(), B = qr() ; if ((!(A % M == 0 &amp;&amp; B))) bsgs(A, B, M) ; else cout &lt;&lt; "Couldn't Produce!" &lt;&lt; endl ; &#125; return 0 ;&#125; $T2~$ $TJOI2007~Cute~Prime​$ 最裸最裸的、无特判的题……可以水一下双倍经验。 $\mathfrak{writter: pks}$]]></content>
      <tags>
        <tag>BSGS</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[$LCT's ~Junior ~Intro$]]></title>
    <url>%2F2019%2F02%2F04%2FLCT-s-Junior-Intro%2F</url>
    <content type="text"><![CDATA[$\rm{0x01}$ 闲话 · $LCT$的用途以及具体思路咳，其实在我最近只是浅浅地学了一部分的基础上，窝觉得$LCT$其实就是一个用来维护森林连通性的。 嗯……因为其独特的性质所以也可以顺便维护好多东西，什么链上的最大值啊，链上的权值和啊……都可以维护——或者说，LCT是更加全能的树剖。 但其实吧……$LCT$打板子是很简单的，但是真正理解却一点儿也不简单。因为本身$splay$就很麻烦了，况且$splay$之前一直用于维护数列。要知道，此处的$splay$可是作为辅助树，维护一整个森林，并且可以支持序列中几乎全部操作——这就大大增高了理解难度。举个例子，你曾经认为已经难以理解、或者说不可以做的、比较复杂的区间翻转$Luogu3391$，在$LCT$里面有十分全面的涉及，但是被精简到了只有两行是用来描述这个内容的。显而易见的是，$LCT$虽然常数十分的大，但代码十分的短，比一棵完整的平衡树短了不少（实测50+行），与$FFT$一样具有着华丽的可观赏性，但是隐藏在之后的思维难度同样不可小觑。 也就是说我们是不是学的太草率、太浮躁了呢？快餐式地学完$LCT$，网上的每一篇博客都包教包会。但是我今天要整理的，是对于$LCT$真正的理解。希望各位看到这篇拙作的人可以获得一些什么。 $\rm{0x02}$ 闲话 · 关于$\rm{splay}$道理我都懂，要想动态拆删一些东西，辅助树的形态可以改变是先决条件。看上去平衡树好像是个不错的选择，但是，选哪个作为辅助树呢？后宫佳丽三千我该翻谁的牌子呢 历史的重任最后落到了$\rm{splay}​$的身上。然后$\rm{splay}​$他居然： 他甚至还： …… 好吧，由于某些rqy也不知道的原因，如果不用$\rm{splay}$的话，复杂度是均摊$\Theta(\rm{nlog^2n})$, 而用$\rm{splay}$就可以做到均摊$\Theta(\rm{nlogn})$ ……但事实上，splay确实有他独特的性质，比如旋转到根啊之类的，比起其他种类的平衡树而言，更加适合$LCT$ $\rm{0x03}$ $LCT$的思路和基础操作一 主要思路主要思路嘛……大概是基于实链剖分的操作。 朴素的树剖是重链剖分，大体上就是将整棵树的链划分为轻边和重链，运用巧妙的性质做到$log$级别。而遗憾的是$LCT$维护的是森林的连通性，所以只能采用实链剖分。 而实链剖分大体上就是把边分为虚边和实边。其中实边串联起一个联通块，同一组实边存在、且仅存在于一棵$\rm{splay}$中。$\rm{splay}$和$\rm{splay}$之间由虚边相连。 实链剖分的好处呢？在于实链剖分是一种动态剖分，他可以随意改变边的虚实属性。而显然，重链剖分由于有着足够的理论依据和逻辑推演，所以轻重链是难以更改，或者说，不可更改的。So，实链剖分为动态树的动态打下了基础。 那么接下来我们来看一个$LCT​$是如何定义的: 首先，一棵$LCT​$管控的是一对分散的点，点以几棵分散的$splay​$的形式聚集。起初整棵$LCT​$是没有任何联系的，各自为战，各自为根。我们接下来会看到的$access​$、$makeroot​$等操作，都是在自己的联通块儿内部进行的操作。换句话讲，$LCT​$维护的是有根森林，即组成森林的每个联通块都有其唯一的根。 实边串联起一个联通块，同一组实边存在、且仅存在于一棵$\rm{splay}$中。$\rm{splay}$和$\rm{splay}$之间由虚边相连。只有实边是有效的，虚边可以被认为不存在。但是两种边都没有用到显式存储，都是通过splay中的$Son$数组和$Fa$数组访问的。但虚边和实边的存储有区别： 虚边是认父不认子，即如果$Fa[x]==y$，那么$y$不存$x$这个儿子，但是$x$存$y$这个父亲。这样做是为了可以$Access$——因为其实在$Access$的子函数$splay$里，发挥作用的实际上是$Fa$指针。 实边是完整的双向存储。 $\rm{splay}$中维护的是一条从存储上到下按在原树中深度严格递增的路径，且中序遍历$\rm{splay}$得到的每个点的深度序列严格递增。换句话讲，一个$\rm{splay}$里面不会出现在原联通块儿（树）中深度相同的两个点。在一棵$\rm{splay}$中，键值就是原树中的深度。 如果$x$是它所在$splay$的最左边的点，那么它在原森林里的父亲是$x$所在$splay$的根的$fa$, 否则就是$x$在$splay$上的前驱. 二 基础操作$emm$所谓基础操作大概就是每个用到$LCT$的题几乎都要用到的操作，我们这个地方先把点$n$所在联通块儿内的树的根记作$root(n) $，把与$n$以实边相连的儿子记作实儿子。 $\rm{1}$ $Access$ 这个操作有着很迷的性质，其时间复杂度是均摊$\log n$的。而这个操作的目的是$Access(n)$表示从$root(n)$向$n$打通一条实链，并以$n$点为最深度最大的点、$root(n)$为深度最小的点形成一棵$\rm{splay}$。 不难看出，这个操作其实跟是一种逻辑层面的自我调控，没有改变原树的结构。 我们思考，如果此时我们$Access​$完点$n​$之后，理论上来讲，$n​$点应该不再有实儿子了——显然，如果有实儿子的话，$splay​$中是应该包含这个实儿子的——而这就不符合$n​$是$\rm{splay}​$中深度最大的点的性质了。而因为在splay中，点是以深度为键值的，所以我们要每次砍掉$\rm{splay}​$中的右儿子——即砍掉原来的实儿子，并把刚刚诞生的$\rm{splay}​$连上。 1234inline void Access(int x) &#123; for (int qwq = 0 ; x ; x = T[qwq = x].F) splay(x), rc = qwq, update(x) ; &#125; 然后这就是$Access​$了。 $2 ~~Make~ Root~$ $make_root​$先从原来的根向$n​$打通一条路径，然后$splay​$上去，最后$reverse​$一下。此处由于一开始$n​$的深度最大，$splay​$之后深度依旧最大，但此时$n​$是$splay​$的根，所以$reverse(n)​$就相当于翻转了整条树上的链，那么翻转之后，$n​$的深度就变成了最小，于是就是这个联通块儿的根节点了。 1234567891011121314151617181920#define lc T[x].Son[0]#define rc T[x].Son[1]struct LCT&#123;int F, Son[2], R, S ;&#125;T[MAXN] ; inline void splay(int x) ;inline void reverse(int x) &#123; lc ^= rc ^= lc ^= rc, T[x].R ^= 1 ;&#125;inline void push_down(int x) &#123; if (!T[x].R) return ; T[x].R = 0 ; if (lc) reverse(lc) ; if (rc) reverse(rc) ; &#125;inline void Rooten(int x) &#123; Access(x), splay(x), reverse(x) ; &#125;inline void splay(int x)&#123;int qwq = x ; stk.push(qwq) ;while(check(qwq)) qwq = T[qwq].F, stk.push(qwq) ;while(!stk.empty()) push_down(stk.top()), stk.pop() ;while(check(x))&#123;int fa = T[x].F, g_fa = T[fa].F ;if (check(fa)) rotate((T[g_fa].Son[1] == fa) == (T[fa].Son[1] == x) ? fa : x) ; rotate(x) ;&#125;&#125; 此处$splay$中由于要下放标记，保证树的形态是正确的，所以我们用一个$stack$存一下，顺序下放标记。 $3 ~Merge~$ 此处的$Merge(x, y)$的意义是，拉起$x,y$中间的链，形成一个$splay$。这里就直接$Mkroot$一遍，然后$Access$即可。让哪个点当根应该都可以，只不过多$splay$几次可以保证优（毒）秀（瘤）的复（大）杂（常）度（数）。 1inline void Merge(int x, int y) &#123; Rooten(x), Access(y), splay(y) ; &#125; $4~~Link~\&amp;~Cut$ 如果保证$Link$和$Cut$都是合法的操作的话，$Link$直接连，$Cut$直接删即可。 12inline void Link(int x, int y)&#123; Rooten(x) ; T[x].F = y ;&#125;inline void Cut(int x, int y)&#123; Merge(x, y) ; T[x].F = T[y].Son[0] = 0 ;&#125; 此处$Link$必须先$Mkroot$一下，否则树链就断了。连的是虚边（因为连实边就会改变原来$splay$的割据）；$Cut$必须先$split$一下，保证两个点之间在同一棵$splay$中，加之我们的$Merge$操作中，一开始把$x$给$mkroot$了，再把$y$点$splay$上去，直接导致了现在$x$应该是$y$的孩子——于是就很开心的，可以直接$cut$了。 但事实上，天不遂人意……有时候这条边并不存在，盲目删除的话会导致$GG$，盲目连边的话也会导致树的形态爆炸，所以我们要进行一波操作…… $New-Link$ 12inline void Link(int x, int y)&#123; Rooten(x) ; if(Find(y) != x) T[x].F = y ;&#125;inline int Find(int x)&#123; Access(x), splay(x) ; while(lc) push_down(x), x = lc ; splay(x) ; return x ;&#125; 此处的意义在于，如果我们发现两个点在一个子树里面，连接它们就破坏了树的性质。$Find$就是无比普通的$Find$。。。。233 但要注意啊，$Find$找的是原树中的根，不是$splay$。由于原树中根的深度一定最小，所以应该是$splay$中最靠左的点……所以不断找左儿子。 多$BB$一句，这个地方一定注意啊！$Find$只改变了$splay$的形态，$mkroot$改变的是原树中的根 $New-Cut$ 12345inline void Cut(int x, int y)&#123; Rooten(x) ; if (Find(y) != x || T[y].Son[0] || T[y].F != x) return ; T[y].F = T[x].Son[1] = 0, update(x) ; &#125; 此处首先我们要判一下这两个点是不是直接相连。是否直接相连……在一棵$splay$中的体现，要克服两个问题，第一是要判断是否连通，还是$Find$操作。 之后我们需要判断是否满足恰好相隔一条边——注意，首先因为代码中的$x$比$y$在原树位置靠上（$Rooten$了$x$），在$splay$中靠左，那么如果$y$有左儿子的话，说明一定有$Depth(x) &lt; Depth(y\text{的左儿子们}) &lt; Depth(y)$，其中$Depth$表示原树深度。那么此时原树中$x$和$y$之间，一定隔着一些节点。考虑树的性质，两点之间有且仅有一条简单路径——所以当$T[y].Son[0]$不指向$Null$时，$x$和$y$之间没有一条边，不能直接$Cut$。 剩下的就很简单了，$T[y].F$应该是$x$，否则也不是直接相连。 5 $~Rotate$中的坑点 呃……其实就一处而已。就是： 123456inline bool check(int x)&#123; return T[T[x].F].Son[0] == x || T[T[x].F].Son[1] == x ; &#125;inline void rotate(int x) &#123; int fa = T[x].F, g_fa = T[fa].F, W = x == T[fa].Son[1] ; if (check(fa)) T[g_fa].Son[T[g_fa].Son[1] == fa] = x ; T[x].F = g_fa ; T[fa].Son[W] = T[x].Son[W ^ 1], T[T[x].Son[W ^ 1]].F = fa, T[fa].F = x, T[x].Son[W ^ 1] = fa, update(fa), update(x) ;&#125; 这个地方$splay$双旋判断祖父的时候，不再用$\rm{if(g_fa)}$，而是用$\rm{if(check(fa))}$。原因很简单，我们的虚边也是有指向父亲的指针的，但是连接两个不同的$splay$ 剩下的……大概就没了吧…… 于是—— $\color{red}{C}\color{cyan}{o}\color{gold}{d}\color{green}{e}$1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;stack&gt;#include &lt;cstdio&gt;#include &lt;iostream&gt;#define MAXN 300233#define lc T[x].Son[0]#define rc T[x].Son[1]#define rep(a, b, c) for(a = b ; a &lt;= c ; ++ a)using namespace std ;struct LCT&#123;int F, Son[2], R, S ;&#125;T[MAXN] ; stack &lt;int&gt; stk ;int base[MAXN], N, M, A, B, C, i ;inline int Find(int x) ;inline void splay(int x) ;inline void push_down(int x) ;inline void update(int x) &#123; T[x].S = T[lc].S ^ T[rc].S ^ base[x] ;&#125;inline void reverse(int x) &#123; lc ^= rc ^= lc ^= rc, T[x].R ^= 1 ;&#125;inline bool check(int x)&#123; return T[T[x].F].Son[0] == x || T[T[x].F].Son[1] == x ; &#125;inline void Access(int x) &#123; for (int qwq = 0 ; x ; x = T[qwq = x].F) splay(x), rc = qwq, update(x) ; &#125;inline void rotate(int x) &#123;int fa = T[x].F, g_fa = T[fa].F, W = x == T[fa].Son[1] ; if (check(fa)) T[g_fa].Son[T[g_fa].Son[1] == fa] = x ; T[x].F = g_fa ; T[fa].Son[W] = T[x].Son[W ^ 1], T[T[x].Son[W ^ 1]].F = fa, T[fa].F = x, T[x].Son[W ^ 1] = fa, update(fa), update(x) ;&#125;inline void splay(int x)&#123; int qwq = x ; stk.push(qwq) ; while(check(qwq)) qwq = T[qwq].F, stk.push(qwq) ; while(!stk.empty()) push_down(stk.top()), stk.pop() ; while(check(x))&#123; int fa = T[x].F, g_fa = T[fa].F ; if (check(fa)) &#123; rotate((T[g_fa].Son[1] == fa) == (T[fa].Son[1] == x) ? fa : x) ; rotate(x) ; &#125;&#125;inline void Rooten(int x) &#123; Access(x), splay(x), reverse(x) ; &#125;inline void split(int x, int y) &#123; Rooten(x), Access(y), splay(y) ; &#125;inline void Link(int x, int y)&#123; Rooten(x) ; if(Find(y) != x) T[x].F = y ;&#125;inline int Find(int x)&#123; Access(x), splay(x) ; while(lc) push_down(x), x = lc ; splay(x) ; return x ;&#125;inline void push_down(int x) &#123; if (!T[x].R) return ; T[x].R = 0 ; if (lc) reverse(lc) ; if (rc) reverse(rc) ; &#125;inline void Cut(int x, int y)&#123; Rooten(x) ; if (Find(y) != x || T[y].Son[0] || T[y].F != x) return ; T[y].F = T[x].Son[1] = 0, update(x) ; &#125;int main()&#123; cin &gt;&gt; N &gt;&gt; M ; rep(i, 1, N) scanf("%lld", &amp;base[i]) ; rep(i, 1, M)&#123; scanf("%d%d%d", &amp;A, &amp;B, &amp;C) ; if (A == 0) split(B, C), printf("%d\n", T[C].S) ; else if (A == 1) Link(B, C) ; else if (A == 2) Cut(B, C) ; else splay(B), base[B] = C ; &#125; return 0 ;&#125; $\rm{0x00}$ 后记和参考可写完了……嗝……打个肥宅嗝犒劳犒劳自己 怎么说呢，自从我开始学$LCT$到我写完这篇$blog$为止，是我十分难熬的时间，总时长接近一周。一开始看别人写的$LCT$，想当然地、草率地理解了理解，就开始打板子，对$LCT$一直是极为肤浅的认识。直到开始写，才发现自己哪个地方都不会，理解的半生不熟，总之很惨…… 写博客真是一个陶冶情操的过程啊……包括做表情包 加油吧，$pks$！ $\rm{Reference}$ $[1]$ :$Flash_Hu$的$blog$ $^{^{[\nearrow ]}}$ $[2]$ :某篇论文，结合食用效果显著 $^{^{[\nearrow]}}$ $\mathfrak{writter:pks}$]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>LCT-Link Cut Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[$Intro$]]></title>
    <url>%2F2019%2F02%2F04%2FIntro-1%2F</url>
    <content type="text"><![CDATA[Hello, here is Orchidany, a high-school student from S.D., China. Algorithms, astrophysics, technology, that’s what I love. Perhaps sometimes I‘m fond of painting, music and modern art appreciation. Anyhow, recently my first mission is Olympiad in Informatics，shorthanded for OI. And this blog is mainly gonna to record my Learning Steps. Although I’m a bit weak in OI by now, but I shall catch the glimmer and keep getting stronger! See you soon in my articles ! Somthing Special Errr…About this ID Orchidany, there is a theory about that: My Chinese Id is 皎月半洒花， which is from the poem (Writter is myself) : 鹃住落英满，柳拂溪畔沙。南城略炊烟，浣女徐归家。故人今安否，欲歌口偏哑。笔寒下梅去，皎月半洒花 So……I’ m glad to encounter you!]]></content>
      <tags>
        <tag>笔尖生花</tag>
      </tags>
  </entry>
</search>
